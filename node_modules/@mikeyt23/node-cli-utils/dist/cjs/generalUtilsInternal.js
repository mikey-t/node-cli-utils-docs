"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.whichInternal = exports.simpleSpawnAsyncInternal = exports.simpleSpawnSyncInternal = exports.validateFindFilesRecursivelyParams = exports.spawnAsyncInternal = exports.dictionaryToEnvFileString = exports.getEnvAsDictionary = exports.copyEnv = void 0;
const node_child_process_1 = require("node:child_process");
const node_fs_1 = __importDefault(require("node:fs"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const NodeCliUtilsConfig_js_1 = require("./NodeCliUtilsConfig.js");
const generalUtils_js_1 = require("./generalUtils.js");
const isCommonJS = typeof require === "function" && typeof module === "object" && module.exports;
const isEsm = !isCommonJS;
const spawnWorkaroundScriptName = 'runWhileParentAlive.js';
const currentModuleDir = ''; // Lazy loaded in getCurrentModuleDir
async function copyEnv(sourcePath, destinationPath, overrideExistingDestinationValues = true, suppressAddKeysMessages = false) {
    (0, generalUtils_js_1.requireValidPath)('sourcePath', sourcePath);
    // If the destination .env file doesn't exist, just copy it and return
    if (!node_fs_1.default.existsSync(destinationPath)) {
        (0, generalUtils_js_1.log)(`creating ${destinationPath} from ${sourcePath}`);
        await promises_1.default.copyFile(sourcePath, destinationPath);
        return;
    }
    const sourceDict = getEnvAsDictionary(sourcePath);
    const destinationDict = getEnvAsDictionary(destinationPath);
    // Determine what keys are missing from destinationPath .env that are in sourcePath .env or .env.template
    const templateKeys = Object.keys(sourceDict);
    const destinationKeysBeforeChanging = Object.keys(destinationDict);
    const keysMissingInDestination = templateKeys.filter(envKey => !destinationKeysBeforeChanging.includes(envKey));
    if (keysMissingInDestination.length > 0) {
        if (!suppressAddKeysMessages) {
            (0, generalUtils_js_1.log)(`adding missing keys in ${destinationPath}: ${keysMissingInDestination.join(', ')}`);
        }
    }
    // For instances where both .env files have the same key, use the value from the source if
    // overrideExistingDestinationValues param is true, otherwise leave the value from the destination intact.
    const newDict = {};
    for (const [key, value] of Object.entries(overrideExistingDestinationValues ? sourceDict : destinationDict)) {
        newDict[key] = value;
    }
    // Add entries that the destination doesn't have yet
    for (const key of keysMissingInDestination) {
        newDict[key] = sourceDict[key];
    }
    const newSortedDict = (0, generalUtils_js_1.sortDictionaryByKeyAsc)(newDict);
    const newEnvFileContent = dictionaryToEnvFileString(newSortedDict);
    await promises_1.default.writeFile(destinationPath, newEnvFileContent);
}
exports.copyEnv = copyEnv;
function getEnvAsDictionary(envPath) {
    const dict = {};
    const lines = (0, generalUtils_js_1.stringToNonEmptyLines)(node_fs_1.default.readFileSync(envPath).toString());
    for (const line of lines) {
        if (line && line.indexOf('=') !== -1) {
            const parts = line.split('=');
            dict[parts[0].trim()] = parts[1].trim();
        }
    }
    return dict;
}
exports.getEnvAsDictionary = getEnvAsDictionary;
function dictionaryToEnvFileString(dict) {
    return Object.entries(dict).map(kvp => `${kvp[0]}=${kvp[1]}`).join('\n') + '\n';
}
exports.dictionaryToEnvFileString = dictionaryToEnvFileString;
async function spawnAsyncInternal(command, args, options) {
    const mergedOptions = setDefaultsAndMergeOptions(options);
    const logPrefix = `[${command} ${args.join(' ')}] `;
    // Windows has an issue where child processes are orphaned when using the shell option. This workaround will spawn
    // a "middle" process using the shell option to check whether parent process is still running at intervals and if not, kill the child process tree.
    const workaroundScriptPath = await getWorkaroundScriptPath(command, args, options);
    if (workaroundScriptPath) {
        return await spawnWithKeepaliveWorkaround(logPrefix, workaroundScriptPath, command, args, mergedOptions);
    }
    return new Promise((resolve, reject) => {
        var _a, _b;
        try {
            const result = getInitialSpawnResult();
            const child = (0, node_child_process_1.spawn)(command, args, mergedOptions);
            const childId = child.pid;
            if (childId === undefined) {
                throw new Error(`${logPrefix}ChildProcess pid is undefined - spawn failed`);
            }
            // This event will only be emitted when stdio is NOT set to 'inherit'
            (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', (data) => {
                result.stdout += data.toString();
            });
            // This event will only be emitted when stdio is NOT set to 'inherit'
            (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on('data', (data) => {
                result.stderr += data.toString();
            });
            const listener = new SignalListener(child, logPrefix);
            child.on('exit', (code, signal) => {
                const signalMessage = signal ? ` with signal ${signal}` : '';
                (0, generalUtils_js_1.trace)(`${logPrefix}ChildProcess exited with code ${code}${signalMessage}`);
                result.code = getResultCode(code, mergedOptions.isLongRunning);
                child.removeAllListeners();
                listener.detach();
                if (mergedOptions.throwOnNonZero && result.code !== 0) {
                    reject(getSpawnError(result.code, result, mergedOptions));
                    return;
                }
                resolve(result);
            });
            child.on('error', (error) => {
                (0, generalUtils_js_1.trace)(`${logPrefix}ChildProcess emitted an error event: `, error);
            });
        }
        catch (err) {
            reject(err);
        }
    });
}
exports.spawnAsyncInternal = spawnAsyncInternal;
// If long running, ctrl+c will cause a null code, which we don't necessarily want to consider an error
function getResultCode(code, isLongRunning) {
    return (code === null && isLongRunning) ? 0 : code !== null && code !== void 0 ? code : 1;
}
const setDefaultsAndMergeOptions = (options) => {
    const defaultSpawnOptions = { stdio: 'inherit', isLongRunning: false, throwOnNonZero: false };
    return { ...defaultSpawnOptions, ...options };
};
// Return workaroundScriptPath if:
// - Long running option set to true
// - OS is Windows
// - It's not the long running workaround call itself (avoid an infinite loop)
// Otherwise return undefined
async function getWorkaroundScriptPath(command, args, options) {
    var _a;
    const moduleDir = await getCurrentModuleDir();
    let workaroundScriptPath = node_path_1.default.join(moduleDir, spawnWorkaroundScriptName);
    // This allows use of spawnAsyncLongRunning within this project (i.e. swigfile.ts)
    if (!node_fs_1.default.existsSync(workaroundScriptPath) && workaroundScriptPath.includes('node-cli-utils')) {
        workaroundScriptPath = node_path_1.default.resolve('dist/esm', spawnWorkaroundScriptName);
    }
    if ((options === null || options === void 0 ? void 0 : options.isLongRunning) && (0, generalUtils_js_1.isPlatformWindows)() && !(command === 'node' && args && ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.endsWith(spawnWorkaroundScriptName)))) {
        return workaroundScriptPath;
    }
    return undefined;
}
async function spawnWithKeepaliveWorkaround(logPrefix, workaroundScriptPath, command, args, options) {
    (0, generalUtils_js_1.trace)(`${logPrefix}Running on Windows with shell option - using middle process hack to prevent orphaned processes`);
    const loggingEnabledString = NodeCliUtilsConfig_js_1.config.orphanProtectionLoggingEnabled.toString();
    const traceEnabledString = NodeCliUtilsConfig_js_1.config.traceEnabled.toString();
    const pollingMillisString = NodeCliUtilsConfig_js_1.config.orphanProtectionPollingIntervalMillis.toString();
    (0, generalUtils_js_1.trace)(`${logPrefix}Orphan protection logging enabled: ${loggingEnabledString}`);
    (0, generalUtils_js_1.trace)(`${logPrefix}Orphan protection trace enabled: ${traceEnabledString}`);
    (0, generalUtils_js_1.trace)(`${logPrefix}Orphan protection polling interval: ${pollingMillisString}ms`);
    if (NodeCliUtilsConfig_js_1.config.orphanProtectionLoggingEnabled) {
        (0, generalUtils_js_1.trace)(`${logPrefix}Orphan protection logging path: ${NodeCliUtilsConfig_js_1.config.orphanProtectionLoggingPath}`);
    }
    const workaroundArgs = [
        workaroundScriptPath,
        loggingEnabledString,
        traceEnabledString,
        pollingMillisString,
        command,
        ...(args !== null && args !== void 0 ? args : [])
    ];
    return await (0, generalUtils_js_1.spawnAsync)('node', workaroundArgs, { ...options, stdio: 'inherit', shell: true });
}
function getInitialSpawnResult(options) {
    var _a, _b;
    return {
        code: 1,
        stdout: '',
        stderr: '',
        cwd: (_b = (_a = options === null || options === void 0 ? void 0 : options.cwd) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : process.cwd()
    };
}
function getSpawnError(code, result, options) {
    const additional = options.throwOnNonZero && options.stdio === 'inherit' ? `. See above for more details (stdio is 'inherit').` : '';
    return new generalUtils_js_1.SpawnError(`Spawning child process failed with code ${code}${additional}`, result);
}
class SignalListener {
    constructor(child, logPrefix) {
        this.signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
        // Arrow function provides unique handler function for each instance of SignalListener
        this.handler = (signal) => {
            (0, generalUtils_js_1.trace)(`${this.logPrefix}Process received ${signal} - killing ChildProcess with ID ${this.child.pid}`);
            this.child.kill(signal);
            this.detach();
        };
        this.child = child;
        this.logPrefix = logPrefix;
        this.attach();
    }
    attach() {
        this.signals.forEach(signal => process.on(signal, this.handler));
    }
    detach() {
        this.signals.forEach(signal => process.removeListener(signal, this.handler));
    }
}
async function getCurrentModuleDir() {
    if (currentModuleDir) {
        return currentModuleDir;
    }
    if (isEsm) {
        const module = await Promise.resolve().then(() => __importStar(require('./esmSpecific.mjs')));
        const metaUrlFilePath = module.getImportMetaUrlFilePath();
        const directory = node_path_1.default.dirname(metaUrlFilePath);
        return node_path_1.default.normalize(directory);
    }
    return __dirname;
}
function validateFindFilesRecursivelyParams(dir, filenamePattern) {
    (0, generalUtils_js_1.requireValidPath)('dir', dir);
    (0, generalUtils_js_1.requireString)('pattern', filenamePattern);
    if (filenamePattern.length > 50) {
        throw new Error(`filenamePattern param must have fewer than 50 characters`);
    }
    const numWildcards = filenamePattern.replace(/\*+/g, '*').split('*').length - 1;
    if (numWildcards > 5) {
        throw new Error(`filenamePattern param must contain 5 or fewer wildcards`);
    }
    if (filenamePattern.includes('/') || filenamePattern.includes('\\')) {
        throw new Error('filenamePattern param must not contain slashes');
    }
}
exports.validateFindFilesRecursivelyParams = validateFindFilesRecursivelyParams;
function simpleSpawnSyncInternal(command, args, throwOnNonZero = true, useCmd = false) {
    var _a;
    (0, generalUtils_js_1.requireString)('command', command);
    const result = (0, node_child_process_1.spawnSync)(command, args !== null && args !== void 0 ? args : [], { encoding: 'utf-8', shell: useCmd ? 'cmd.exe' : false });
    const spawnResult = {
        code: (_a = result.status) !== null && _a !== void 0 ? _a : 1,
        stdout: result.stdout.toString(),
        stderr: result.stdout.toString(),
        stdoutLines: (0, generalUtils_js_1.stringToNonEmptyLines)(result.stdout.toString()),
        error: result.error,
        cwd: process.cwd()
    };
    if (spawnResult.code !== 0 && throwOnNonZero) {
        throw new generalUtils_js_1.SimpleSpawnError(`spawned process failed with code ${spawnResult.code}`, spawnResult);
    }
    return spawnResult;
}
exports.simpleSpawnSyncInternal = simpleSpawnSyncInternal;
async function simpleSpawnAsyncInternal(command, args, throwOnNonZero = true, useCmd = false) {
    (0, generalUtils_js_1.requireString)('command', command);
    const result = await (0, generalUtils_js_1.spawnAsync)(command, args, { stdio: 'pipe', shell: useCmd ? 'cmd.exe' : false });
    const spawnResult = {
        code: result.code,
        stdout: result.stdout,
        stderr: result.stdout,
        stdoutLines: (0, generalUtils_js_1.stringToNonEmptyLines)(result.stdout),
        error: result.error,
        cwd: process.cwd()
    };
    if (spawnResult.code !== 0 && throwOnNonZero) {
        throw new generalUtils_js_1.SimpleSpawnError(`spawned process failed with code ${spawnResult.code}`, spawnResult);
    }
    return spawnResult;
}
exports.simpleSpawnAsyncInternal = simpleSpawnAsyncInternal;
// Spawn functions passed here so they can be mocked in tests
function whichInternal(commandName, simpleCmd, simpleSpawn) {
    (0, generalUtils_js_1.requireString)('commandName', commandName);
    if ((0, generalUtils_js_1.stripShellMetaCharacters)(commandName) !== commandName) {
        throw new Error(`commandName cannot contain shell meta characters: ${commandName}`);
    }
    const execFunc = (0, generalUtils_js_1.isPlatformWindows)() ? simpleCmd : simpleSpawn;
    const cmd = (0, generalUtils_js_1.isPlatformWindows)() ? 'where' : 'which';
    const args = (0, generalUtils_js_1.isPlatformWindows)() ? [commandName] : ['-a', commandName];
    try {
        const result = execFunc(cmd, args);
        if (result instanceof Promise) {
            return result.then(parsedResult => ({
                location: parsedResult.stdoutLines[0],
                additionalLocations: parsedResult.stdoutLines.slice(1),
                error: parsedResult.error
            })).catch(err => ({
                location: undefined,
                additionalLocations: undefined,
                error: err
            }));
        }
        return {
            location: result.stdoutLines[0],
            additionalLocations: result.stdoutLines.slice(1),
            error: result.error
        };
    }
    catch (err) {
        return {
            location: undefined,
            additionalLocations: undefined,
            error: err
        };
    }
}
exports.whichInternal = whichInternal;
//# sourceMappingURL=data:application/json;base64,