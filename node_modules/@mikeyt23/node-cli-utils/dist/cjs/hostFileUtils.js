"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEolNormalizedWithoutLine = exports.isIpV4Address = exports.changeHostsFile = exports.hostsFileStringHasEntry = exports.hostsFileHasEntry = exports.getHostsFileString = exports.getHostsPath = exports.removeHostsEntry = exports.ensureHostsEntry = void 0;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_os_1 = __importDefault(require("node:os"));
const generalUtils_js_1 = require("./generalUtils.js");
async function ensureHostsEntry(url, ipV4Address = '127.0.0.1') {
    const hostname = (0, generalUtils_js_1.getHostname)(url);
    await changeHostsFile(hostname, ipV4Address, 'add');
}
exports.ensureHostsEntry = ensureHostsEntry;
async function removeHostsEntry(url, ipV4Address = '127.0.0.1') {
    const hostname = (0, generalUtils_js_1.getHostname)(url);
    await changeHostsFile(hostname, ipV4Address, 'remove');
}
exports.removeHostsEntry = removeHostsEntry;
function getHostsPath() {
    return (0, generalUtils_js_1.isPlatformWindows)() ? 'C:/Windows/System32/drivers/etc/hosts' : '/etc/hosts';
}
exports.getHostsPath = getHostsPath;
async function getHostsFileString() {
    return await promises_1.default.readFile(getHostsPath(), { encoding: 'utf-8' });
}
exports.getHostsFileString = getHostsFileString;
async function hostsFileHasEntry(hostname, ipV4Address = '127.0.0.1') {
    const entry = `${ipV4Address} ${hostname}`;
    const hostsFileString = await getHostsFileString();
    return hostsFileStringHasEntry(hostsFileString, entry);
}
exports.hostsFileHasEntry = hostsFileHasEntry;
// Check by normalizing whitespace (collapse consecutive spaces to single spaces) in entry and on each line checked
function hostsFileStringHasEntry(hostsFileString, entry) {
    const normalizedEntry = entry.replace(/\s+/g, ' ');
    const hostsLines = (0, generalUtils_js_1.stringToNonEmptyLines)(hostsFileString).map(l => l.replace(/\s+/g, ' ')).filter(l => !l.startsWith('#'));
    const hasLine = hostsLines.includes(normalizedEntry);
    return hasLine;
}
exports.hostsFileStringHasEntry = hostsFileStringHasEntry;
async function changeHostsFile(hostname, ipV4Address, operation) {
    (0, generalUtils_js_1.requireString)('hostname', hostname);
    if ((0, generalUtils_js_1.hasWhitespace)(hostname)) {
        throw new Error(`Invalid hostname: ${hostname}`);
    }
    if (!isIpV4Address(ipV4Address)) {
        throw new Error(`Invalid ipV4Address: ${ipV4Address}`);
    }
    const isAddition = operation === 'add';
    const isRemoval = operation === 'remove';
    const hostsPath = getHostsPath();
    const entry = `${ipV4Address} ${hostname}`;
    (0, generalUtils_js_1.log)(`checking hosts file: ${hostsPath} for entry ${entry}`);
    const hostsFileString = await getHostsFileString();
    const hasLine = hostsFileStringHasEntry(hostsFileString, entry);
    if (isAddition && hasLine) {
        (0, generalUtils_js_1.log)(`there is an existing entry in the hosts file (${entry}), skipping`);
        return;
    }
    if (isRemoval && !hasLine) {
        (0, generalUtils_js_1.log)(`there is no hosts entry to remove (${entry}), skipping`);
    }
    if (isAddition && !hasLine) {
        (0, generalUtils_js_1.log)('existing entry not found - appending entry to the hosts file');
        await promises_1.default.appendFile(hostsPath, `\n${entry}`);
    }
    if (isRemoval && hasLine) {
        (0, generalUtils_js_1.log)(`existing entry found - removing entry`);
        const hostsWithoutEntry = getEolNormalizedWithoutLine(hostsFileString, entry);
        await promises_1.default.writeFile(hostsPath, hostsWithoutEntry);
    }
}
exports.changeHostsFile = changeHostsFile;
function isIpV4Address(address) {
    const ipV4AddressRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
    if (!ipV4AddressRegex.test(address)) {
        return false;
    }
    const octets = address.split('.').map(Number);
    return octets.every(octet => octet >= 0 && octet <= 255);
}
exports.isIpV4Address = isIpV4Address;
/**
 * The `initialString` will have line endings normalized to use os.EOL and lines with `omitLine` will be removed.
 * Comparisons for which lines should be removed are normalizing whitespace (multiple spaces collapsed into single
 * spaces for the comparison). This is useful to remove instances of a hosts entry, for example.
 * @param initialString The string to normalize remove instances of omitLine from
 * @param omitLine All instance of this string will be omitted from the result
 * @returns A string that has instances of the omitLine removed and all line endings changed to match the os.EOL
 */
function getEolNormalizedWithoutLine(initialString, omitLine) {
    const normalizedOmitLine = omitLine.replace(/\s+/g, ' ');
    const lines = initialString.split('\n')
        .map(l => l.replace(/\r/g, ''))
        .filter(l => l.replace(/\s+/g, ' ') !== normalizedOmitLine);
    return lines.join(node_os_1.default.EOL);
}
exports.getEolNormalizedWithoutLine = getEolNormalizedWithoutLine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdEZpbGVVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob3N0RmlsZVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdFQUFrQztBQUNsQyxzREFBd0I7QUFDeEIsdURBQTRIO0FBRXJILEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsY0FBc0IsV0FBVztJQUNuRixNQUFNLFFBQVEsR0FBRyxJQUFBLDZCQUFXLEVBQUMsR0FBRyxDQUFDLENBQUE7SUFDakMsTUFBTSxlQUFlLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNyRCxDQUFDO0FBSEQsNENBR0M7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsR0FBVyxFQUFFLGNBQXNCLFdBQVc7SUFDbkYsTUFBTSxRQUFRLEdBQUcsSUFBQSw2QkFBVyxFQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2pDLE1BQU0sZUFBZSxDQUFDLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDeEQsQ0FBQztBQUhELDRDQUdDO0FBRUQsU0FBZ0IsWUFBWTtJQUMxQixPQUFPLElBQUEsbUNBQWlCLEdBQUUsQ0FBQyxDQUFDLENBQUMsdUNBQXVDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQTtBQUNyRixDQUFDO0FBRkQsb0NBRUM7QUFFTSxLQUFLLFVBQVUsa0JBQWtCO0lBQ3RDLE9BQU8sTUFBTSxrQkFBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQ2xFLENBQUM7QUFGRCxnREFFQztBQUVNLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxRQUFnQixFQUFFLGNBQXNCLFdBQVc7SUFDekYsTUFBTSxLQUFLLEdBQUcsR0FBRyxXQUFXLElBQUksUUFBUSxFQUFFLENBQUE7SUFDMUMsTUFBTSxlQUFlLEdBQUcsTUFBTSxrQkFBa0IsRUFB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