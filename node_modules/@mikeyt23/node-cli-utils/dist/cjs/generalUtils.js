"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDirectorySync = exports.isDirectory = exports.getHostname = exports.ExtendedError = exports.humanizeTime = exports.getPowershellHackArgs = exports.powershellHackPrefix = exports.logTable = exports.escapeStringForRegex = exports.findFilesRecursively = exports.deleteEnvIfExists = exports.sortDictionaryByKeyAsc = exports.filterDictionary = exports.copyModifiedEnv = exports.overwriteEnvFile = exports.copyNewEnvValues = exports.getConfirmationExample = exports.getConfirmation = exports.askQuestion = exports.ensureDockerRunning = exports.isDockerRunning = exports.isDockerInstalled = exports.whichSync = exports.which = exports.isPlatformLinux = exports.isPlatformMac = exports.isPlatformWindows = exports.simpleSpawnAsync = exports.simpleSpawnSync = exports.simpleCmdAsync = exports.simpleCmdSync = exports.stringToLines = exports.stringToNonEmptyLines = exports.spawnDockerCompose = exports.isDockerComposeProjectNameValid = exports.requireValidPath = exports.requireString = exports.copyDirectoryContents = exports.emptyDirectory = exports.mkdirpSync = exports.mkdirp = exports.ensureDirectory = exports.spawnAsyncLongRunning = exports.spawnAsync = exports.sleep = exports.SimpleSpawnError = exports.SpawnError = exports.trace = exports.logIf = exports.log = void 0;
exports.toWslPath = exports.Emoji = exports.stripShellMetaCharacters = exports.hasWhitespace = exports.isValidDirName = exports.collapseWhitespace = exports.withRetryAsync = exports.getNormalizedError = exports.getRequiredEnvVar = exports.isPortAvailable = exports.getPlatformCode = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_os_1 = require("node:os");
const node_path_1 = __importStar(require("node:path"));
const readline = __importStar(require("readline"));
const net = __importStar(require("net"));
const NodeCliUtilsConfig_js_1 = require("./NodeCliUtilsConfig.js");
const generalUtilsInternal_js_1 = require("./generalUtilsInternal.js");
const dockerComposeCommandsThatSupportDetached = ['exec', 'logs', 'ps', 'restart', 'run', 'start', 'stop', 'up'];
/**
 * Just a wrapper for console.log() to type less.
 * @param data The data to log
 * @param moreData More data to log
 */
function log(data, ...moreData) {
    console.log(data, ...moreData);
}
exports.log = log;
/**
 * Log conditionally. Useful for methods that have an option to either suppress output or to show it when it normally isn't.
 * @param data The data to log
 * @param moreData More data to log
 */
function logIf(shouldLog, data, ...moreData) {
    if (shouldLog) {
        console.log(data, ...moreData);
    }
}
exports.logIf = logIf;
/**
 * Wrapper for console.log() that is suppressed if NodeCliUtilsConfig.logEnabled is false.
 * @param data The data to log
 * @param moreData More data to log
 */
function trace(data, ...moreData) {
    if (NodeCliUtilsConfig_js_1.config.traceEnabled) {
        const prefix = `[TRACE]`;
        console.log(prefix, data, ...moreData);
    }
}
exports.trace = trace;
/**
 * Error throw by {@link spawnAsync} when the spawned process exits with a non-zero exit code and options.throwOnNonZero is true.
 *
 * Contains a {@link SpawnResult} with the exit code, stdout, stderr, and error (if any).
 */
class SpawnError extends Error {
    constructor(message, result) {
        super(message);
        this.result = result;
    }
}
exports.SpawnError = SpawnError;
/**
 * Error throw by {@link simpleSpawnSync} and {@link simpleCmdSync} when the spawned process exits with a non-zero exit code and throwOnNonZero param is true (the default).
 *
 * Contains a {@link SimpleSpawnResult} with the exit code, stdout, stderr, and error (if any) in addition to stdoutLines, which is stdout split into lines from stdout that weren't empty.
 */
class SimpleSpawnError extends Error {
    constructor(message, result) {
        super(message);
        this.result = result;
    }
}
exports.SimpleSpawnError = SimpleSpawnError;
/**
 * Sleeps for the specified number of milliseconds.
 * @param ms The number of milliseconds to sleep
 * @returns A Promise that resolves after the specified number of milliseconds
 */
async function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
exports.sleep = sleep;
/**
 * This is a wrapper function for NodeJS spawn. Defaults stdio to inherit so that output is visible in the console,
 * but note that this means stdout and stderr will not be available in the returned SpawnResult. To hide the output
 * from the console but collect the stdout and stderr in the SpawnResult, use stdio: 'pipe'.
 *
 * When spawning long-running processes, use {@link spawnAsyncLongRunning} instead so that unexpected
 * termination of the parent process will not orphan the child process tree on windows.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command The command to spawn
 * @param args The arguments to pass to the command
 * @param options The options to pass to the command
 * @returns A Promise that resolves to a {@link SpawnResult}
 */
async function spawnAsync(command, args, options) {
    return (0, generalUtilsInternal_js_1.spawnAsyncInternal)(command, args !== null && args !== void 0 ? args : [], options);
}
exports.spawnAsync = spawnAsync;
/**
 * Use this alternate spawn wrapper instead of {@link spawnAsync} when spawning long-running processes to
 * avoid orphaned child process trees on Windows.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command The command to spawn
 * @param args The arguments to pass to the command
 * @param cwd The current working directory to run the command from - defaults to process.cwd()
 * @returns A Promise that resolves to a {@link SpawnResult}
 */
async function spawnAsyncLongRunning(command, args, cwd) {
    return (0, generalUtilsInternal_js_1.spawnAsyncInternal)(command, args !== null && args !== void 0 ? args : [], { cwd: cwd, isLongRunning: true });
}
exports.spawnAsyncLongRunning = spawnAsyncLongRunning;
/**
 * Ensure the directory exists. Similar to `mkdir -p` (creates parent directories if they don't exist).
 * @param dir The directory to ensure exists. If it does not exist, it will be created.
 */
async function ensureDirectory(dir) {
    return await mkdirp(dir);
}
exports.ensureDirectory = ensureDirectory;
/**
 * Create a directory. Will create parent directory structure if it don't exist. Similar to `mkdir -p`.
 * @param dir The directory to create.
 */
async function mkdirp(dir) {
    requireString('dir', dir);
    try {
        await promises_1.default.mkdir(dir, { recursive: true });
    }
    catch (err) {
        // Must catch and re-throw in order to get a stack trace: https://github.com/nodejs/node/issues/30944
        throw new ExtendedError('Error creating directory', getNormalizedError(err));
    }
}
exports.mkdirp = mkdirp;
/**
 * Create a directory. Will create parent directory structure if it don't exist. Similar to `mkdir -p`.
 * @param dir The directory to create.
 */
async function mkdirpSync(dir) {
    requireString('dir', dir);
    node_fs_1.default.mkdirSync(dir, { recursive: true });
}
exports.mkdirpSync = mkdirpSync;
/**
 * Empties a directory of all files and subdirectories. Optionally skips files and directories at the top level. For other
 * options, see {@link EmptyDirectoryOptions}.
 * @param directoryToEmpty The directory to empty.
 * @param options See {@link EmptyDirectoryOptions}.
 */
async function emptyDirectory(directoryToEmpty, options) {
    var _a;
    requireString('directoryToEmpty', directoryToEmpty);
    const defaultOptions = { fileAndDirectoryNamesToSkip: [], force: false, throwIfNotExists: false };
    const mergedOptions = { ...defaultOptions, ...options };
    if (!node_fs_1.default.existsSync(directoryToEmpty)) {
        if (mergedOptions.throwIfNotExists) {
            throw new Error('Directory does not exist and throwIfNotExists was set to true');
        }
        trace(`directoryToEmpty does not exist - creating directory ${directoryToEmpty}`);
        await mkdirp(directoryToEmpty);
        return;
    }
    if (!node_fs_1.default.lstatSync(directoryToEmpty).isDirectory()) {
        throw new Error(`directoryToEmpty is not a directory: ${directoryToEmpty}`);
    }
    // Add some guardrails to prevent accidentally emptying the wrong directory
    const absolutePath = node_path_1.default.resolve(directoryToEmpty);
    trace(`emptying directory: ${absolutePath}`);
    if (!absolutePath.startsWith(process.cwd())) {
        throw new Error(`directoryToEmpty must be a child of the current working directory: ${directoryToEmpty}`);
    }
    if (absolutePath === process.cwd()) {
        throw new Error(`directoryToEmpty cannot be the current working directory: ${directoryToEmpty}`);
    }
    const dir = await promises_1.default.opendir(directoryToEmpty, { encoding: 'utf-8' });
    if (mergedOptions.fileAndDirectoryNamesToSkip && !Array.isArray(mergedOptions.fileAndDirectoryNamesToSkip)) {
        throw new Error('fileAndDirectoryNamesToSkip must be an array');
    }
    let dirEntry = await dir.read();
    while (dirEntry) {
        if ((_a = mergedOptions.fileAndDirectoryNamesToSkip) === null || _a === void 0 ? void 0 : _a.includes(dirEntry.name)) {
            dirEntry = await dir.read();
            continue;
        }
        const direntPath = node_path_1.default.join(directoryToEmpty, dirEntry.name);
        if (dirEntry.isDirectory()) {
            await promises_1.default.rm(direntPath, { recursive: true, force: mergedOptions.force });
        }
        else {
            await promises_1.default.rm(direntPath, { force: mergedOptions.force });
        }
        dirEntry = await dir.read();
    }
    await dir.close();
}
exports.emptyDirectory = emptyDirectory;
/**
 * Copies the contents of a directory to another directory (not including the top-level directory itself).
 *
 * If the destination directory does not exist, it will be created.
 * @param sourceDirectory Directory to copy from
 * @param destinationDirectory Directory to copy to
 */
async function copyDirectoryContents(sourceDirectory, destinationDirectory) {
    requireString('sourceDirectory', sourceDirectory);
    requireString('destinationDirectory', destinationDirectory);
    if (!node_fs_1.default.existsSync(sourceDirectory)) {
        throw new Error(`sourceDirectory directory does not exist: ${sourceDirectory}`);
    }
    if (!node_fs_1.default.lstatSync(sourceDirectory).isDirectory()) {
        throw new Error(`sourceDirectory is not a directory: ${sourceDirectory}`);
    }
    if (!node_fs_1.default.existsSync(destinationDirectory)) {
        await mkdirp(destinationDirectory);
    }
    if (!node_fs_1.default.lstatSync(destinationDirectory).isDirectory()) {
        throw new Error(`destinationDirectory is not a directory: ${destinationDirectory}`);
    }
    const dir = await promises_1.default.opendir(sourceDirectory, { encoding: 'utf-8' });
    let dirEntry = await dir.read();
    while (dirEntry) {
        const sourcePath = node_path_1.default.join(sourceDirectory, dirEntry.name);
        const destPath = node_path_1.default.join(destinationDirectory, dirEntry.name);
        if (dirEntry.isDirectory()) {
            await copyDirectoryContents(sourcePath, destPath);
        }
        else {
            await promises_1.default.copyFile(sourcePath, destPath);
        }
        dirEntry = await dir.read();
    }
}
exports.copyDirectoryContents = copyDirectoryContents;
/**
 * Helper method to validate that a non-falsy and non-empty value is provided for a parameter that should be a string.
 * @param paramName The name of the parameter to be used in the error message
 * @param paramValue The value of the parameter
 */
function requireString(paramName, paramValue) {
    if (paramValue === undefined || paramValue === null || paramValue === '' || typeof paramValue !== 'string' || paramValue.trim() === '') {
        throw new Error(`Required param '${paramName}' is missing`);
    }
}
exports.requireString = requireString;
/**
 * Helper method to validate that the path actually exists for the provided value.
 * @param paramName The name of the parameter, for logging purposes
 * @param paramValue The value of the parameter
 */
function requireValidPath(paramName, paramValue) {
    requireString(paramName, paramValue);
    if (!node_fs_1.default.existsSync(paramValue)) {
        throw new Error(`Invalid or nonexistent path provided for param '${paramName}': ${paramValue}`);
    }
}
exports.requireValidPath = requireValidPath;
/**
 * Project names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit.
 *
 * See https://docs.docker.com/compose/environment-variables/envvars/#compose_project_name.
 * @param projectName The string to validate
 * @returns `true` if it's a valid docker compose project name and `false` otherwise
 */
function isDockerComposeProjectNameValid(projectName) {
    requireString('projectName', projectName);
    // Ensure first char is a lowercase letter or digit
    if (!/^[a-z0-9]/.test(projectName[0])) {
        return false;
    }
    // Ensure the rest of the chars are only lowercase letters, digits, dashes and underscores
    return /^[a-z0-9-_]+$/.test(projectName);
}
exports.isDockerComposeProjectNameValid = isDockerComposeProjectNameValid;
/**
 * For docker compose commands, see https://docs.docker.com/compose/reference/. For available options for this wrapper function, see {@link DockerComposeOptions}.
 *
 * The current working directory will be the directory of the {@link dockerComposePath} unless specified in the options. This ensures relative paths in the
 * docker compose file will be relative to itself by default.
 *
 * See {@link DockerComposeOptions.projectName} for info on where to locate your docker compose file and how to specify the docker project name.
 * @param dockerComposePath Path to docker-compose.yml
 * @param dockerComposeCommand The docker-compose command to run
 * @param options {@link DockerComposeOptions} to use, including additional arguments to pass to the docker compose command and the project name
 */
async function spawnDockerCompose(dockerComposePath, dockerComposeCommand, options) {
    requireValidPath('dockerComposePath', dockerComposePath);
    requireString('dockerComposeCommand', dockerComposeCommand);
    if (options === null || options === void 0 ? void 0 : options.cwd) {
        requireValidPath('cwd', options.cwd);
    }
    if (options === null || options === void 0 ? void 0 : options.altEnvFilePath) {
        requireValidPath('altEnvFilePath', options.altEnvFilePath);
    }
    if ((options === null || options === void 0 ? void 0 : options.projectName) && !isDockerComposeProjectNameValid(options.projectName)) {
        throw new Error('Invalid docker compose project name specified for the projectName param. Project names must contain only lowercase letters, decimal digits, dashes, and underscores, and must begin with a lowercase letter or decimal digit.');
    }
    if ((options === null || options === void 0 ? void 0 : options.profile) && !/[a-zA-Z0-9][a-zA-Z0-9_.-]+/.test(options.profile)) {
        throw new Error('Invalid profile option - must match regex: [a-zA-Z0-9][a-zA-Z0-9_.-]+');
    }
    if (!await isDockerRunning()) {
        throw new Error('Docker is not running');
    }
    const defaultOptions = { args: [], attached: false, projectName: undefined, cwd: undefined };
    const mergedOptions = { ...defaultOptions, ...options };
    if (!options || options.useWslPrefix === undefined) {
        mergedOptions.useWslPrefix = NodeCliUtilsConfig_js_1.config.useWslPrefixForDockerCommands;
    }
    const dockerComposeDir = node_path_1.default.dirname(dockerComposePath);
    const dockerComposeFilename = node_path_1.default.basename(dockerComposePath);
    if (!mergedOptions.cwd) {
        mergedOptions.cwd = dockerComposeDir;
    }
    let dockerComposePathResolved = mergedOptions.cwd ? node_path_1.default.resolve(dockerComposePath) : dockerComposeFilename;
    if (mergedOptions.useWslPrefix) {
        dockerComposePathResolved = toWslPath(dockerComposePathResolved);
    }
    let spawnArgs = ['compose', '-f', dockerComposePathResolved];
    if (mergedOptions.projectName) {
        spawnArgs.push('--project-name', mergedOptions.projectName);
    }
    if (mergedOptions.profile) {
        spawnArgs.push('--profile', mergedOptions.profile);
    }
    if (mergedOptions.altEnvFilePath) {
        spawnArgs.push('--env-file', mergedOptions.useWslPrefix ? toWslPath(mergedOptions.altEnvFilePath) : mergedOptions.altEnvFilePath);
    }
    spawnArgs.push(dockerComposeCommand);
    if (!mergedOptions.attached && dockerComposeCommandsThatSupportDetached.includes(dockerComposeCommand)) {
        spawnArgs.push('--detach');
    }
    if (mergedOptions.args) {
        spawnArgs = spawnArgs.concat(mergedOptions.args);
    }
    trace(`running command in ${mergedOptions.cwd}: docker ${spawnArgs.join(' ')}`);
    const longRunning = dockerComposeCommandsThatSupportDetached.includes(dockerComposeCommand) && (options === null || options === void 0 ? void 0 : options.attached) === true;
    trace(`docker compose command will be configured to use long running option: ${longRunning}`);
    const spawnOptions = {
        cwd: mergedOptions.cwd,
        shell: isPlatformWindows(),
        isLongRunning: longRunning
    };
    const spawnResult = mergedOptions.useWslPrefix ?
        await (0, generalUtilsInternal_js_1.spawnAsyncInternal)('wsl', ['docker', ...spawnArgs], spawnOptions) :
        await (0, generalUtilsInternal_js_1.spawnAsyncInternal)('docker', spawnArgs, spawnOptions);
    if (spawnResult.code !== 0) {
        throw new Error(`docker compose command failed with code ${spawnResult.code}`);
    }
}
exports.spawnDockerCompose = spawnDockerCompose;
/**
 * Splits a string into lines, removing `\n` and `\r` characters. Does not return empty lines. Also see {@link stringToLines}.
 * @param str String to split into lines
 * @returns An array of lines from the string, with empty lines removed
 */
function stringToNonEmptyLines(str) {
    if (!str) {
        return [];
    }
    return str.split('\n').filter(line => line === null || line === void 0 ? void 0 : line.trim()).map(line => line.replace('\r', ''));
}
exports.stringToNonEmptyLines = stringToNonEmptyLines;
/**
 * Splits a string into lines, removing `\n` and `\r` characters. Returns empty lines. Also see {@link stringToNonEmptyLines}.
 * @param str String to split into lines
 * @returns An array of lines from the string, with empty lines removed
 */
function stringToLines(str) {
    if (!str) {
        return [];
    }
    return str.split('\n').map(line => line.replace('\r', ''));
}
exports.stringToLines = stringToLines;
/**
 * Runs the requested command using NodeJS spawnSync wrapped in an outer Windows CMD.exe command and returns the result with stdout split into lines.
 *
 * Use this for simple quick commands that don't require a lot of control.
 *
 * For commands that aren't Windows and CMD specific, use {@link simpleSpawnSync}.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command Command to run
 * @param args Arguments to pass to the command
 * @returns An object with the status code, stdout, stderr, and error (if any)
 * @throws {@link SimpleSpawnError} if the command fails and throwOnNonZero is true
 */
function simpleCmdSync(command, args, throwOnNonZero = true) {
    if (!isPlatformWindows()) {
        throw new Error('getCmdResult is only supported on Windows');
    }
    // Was previously spawning 'cmd' directly with params '/D', '/S', '/C' - but we may as well let NodeJS do the work of escaping args to work correctly with cmd
    return (0, generalUtilsInternal_js_1.simpleSpawnSyncInternal)(command, args, throwOnNonZero, true);
}
exports.simpleCmdSync = simpleCmdSync;
/**
 * Runs the requested command using {@link spawnAsync} wrapped in an outer Windows CMD.exe command and returns the result with stdout split into lines.
 *
 * Use this for simple quick commands that don't require a lot of control.
 *
 * For commands that aren't Windows and CMD specific, use {@link simpleSpawnAsync}.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command Command to run
 * @param args Arguments to pass to the command
 * @returns An object with the status code, stdout, stderr, and error (if any)
 * @throws {@link SimpleSpawnError} if the command fails and throwOnNonZero is true
 */
async function simpleCmdAsync(command, args, throwOnNonZero = true) {
    if (!isPlatformWindows()) {
        throw new Error('getCmdResult is only supported on Windows');
    }
    // Was previously spawning 'cmd' directly with params '/D', '/S', '/C' - but we may as well let NodeJS do the work of escaping args to work correctly with cmd
    return await (0, generalUtilsInternal_js_1.simpleSpawnAsyncInternal)(command, args, throwOnNonZero, true);
}
exports.simpleCmdAsync = simpleCmdAsync;
/**
 * Runs the requested command using NodeJS spawnSync and returns the result with stdout split into lines.
 *
 * Use this for simple quick commands that don't require a lot of control.
 *
 * For commands that are Windows and CMD specific, use {@link simpleCmdSync}.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command Command to run
 * @param args Arguments to pass to the command
 * @returns An object with the status code, stdout, stderr, and error (if any)
 * @throws {@link SimpleSpawnError} if the command fails and throwOnNonZero is true
 */
function simpleSpawnSync(command, args, throwOnNonZero = true) {
    return (0, generalUtilsInternal_js_1.simpleSpawnSyncInternal)(command, args, throwOnNonZero);
}
exports.simpleSpawnSync = simpleSpawnSync;
/**
 * Runs the requested command using {@link spawnAsync} and returns the result with stdout split into lines.
 *
 * Use this for simple quick commands that don't require a lot of control.
 *
 * For commands that are Windows and CMD specific, use {@link simpleCmdSync}.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command Command to run
 * @param args Arguments to pass to the command
 * @returns An object with the status code, stdout, stderr, and error (if any)
 * @throws {@link SimpleSpawnError} if the command fails and throwOnNonZero is true
 */
async function simpleSpawnAsync(command, args, throwOnNonZero = true) {
    return await (0, generalUtilsInternal_js_1.simpleSpawnAsyncInternal)(command, args, throwOnNonZero);
}
exports.simpleSpawnAsync = simpleSpawnAsync;
/**
 * @returns `true` if platform() is 'win32', `false` otherwise
 */
function isPlatformWindows() {
    return (0, node_os_1.platform)() === 'win32';
}
exports.isPlatformWindows = isPlatformWindows;
/**
 *
 * @returns `true` if platform() is 'darwin', `false` otherwise
 */
function isPlatformMac() {
    return (0, node_os_1.platform)() === 'darwin';
}
exports.isPlatformMac = isPlatformMac;
/**
 *
 * @returns `true` if {@link isPlatformWindows} and {@link isPlatformMac} are both `false, otherwise returns `true`
 */
function isPlatformLinux() {
    return !isPlatformWindows() && !isPlatformMac();
}
exports.isPlatformLinux = isPlatformLinux;
/**
 * This is a cross-platform method to get the location of a system command. Useful for checking if software
 * is installed, where it's installed and whether there are multiple locations.
 * @param commandName The name of the command to find
 * @returns The location of the command, any additional locations, and an error if one occurred
 */
async function which(commandName) {
    return (0, generalUtilsInternal_js_1.whichInternal)(commandName, simpleCmdAsync, simpleSpawnAsync);
}
exports.which = which;
/**
 * This is a cross-platform method to get the location of a system command. Useful for checking if software
 * is installed, where it's installed and whether there are multiple locations.
 * @param commandName The name of the command to find
 * @returns The location of the command, any additional locations, and an error if one occurred
 */
function whichSync(commandName) {
    return (0, generalUtilsInternal_js_1.whichInternal)(commandName, simpleCmdSync, simpleSpawnSync);
}
exports.whichSync = whichSync;
/**
 * Uses {@link which} to determine if docker is installed. If the `which` call doesn't find docker and the platform
 * is Windows, then this will check the output of `wsl docker --version` to see if just the engine is installed.
 * @returns `true` if docker is installed, `false` otherwise
 */
async function isDockerInstalled() {
    if ((await which('docker')).location) {
        return true;
    }
    if (isPlatformWindows()) {
        const result = await simpleSpawnAsync('wsl', ['docker', '--version']);
        return result.code === 0;
    }
    return false;
}
exports.isDockerInstalled = isDockerInstalled;
/**
 * Runs the `docker info` command and looks for "error during connect" in the output to determine if docker is running. If you
 * want to check if docker is installed, use {@link isDockerInstalled}.
 * @returns `true` if docker is installed and running, `false` otherwise
 */
async function isDockerRunning() {
    try {
        const result = isPlatformWindows() ?
            await simpleSpawnAsync('wsl', ['docker', 'info']) :
            await simpleSpawnAsync('docker', ['info']);
        return result.code === 0 && !result.stdout.includes('error during connect');
    }
    catch (err) {
        return false;
    }
}
exports.isDockerRunning = isDockerRunning;
/**
 * Attempt to start the docker service if it isn't running. Whether it's running is determined by a call to {@link isDockerRunning}.
 *
 * Notes on docker startup command:
 * - May require entering a password
 * - On Windows with Docker Desktop it will run `Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe"`
 * - On Windows without Docker Desktop it will run `wsl -u root -e sh -c "service docker start"`
 * - On Linux it will run `sudo systemctl start docker`
 * - Not currently supported on Mac
 *
 * @throws An {@link Error} If docker is not detected on the system.
 * @throws An {@link Error} if docker is detected as installed and not running but the system is not Windows or Linux.
 */
async function ensureDockerRunning() {
    if (!await isDockerInstalled()) {
        throw new Error('Docker does not appear to be installed');
    }
    if (await isDockerRunning()) {
        return;
    }
    let command;
    let args;
    if (isPlatformWindows()) {
        if (!(await which('docker')).location) {
            command = 'wsl';
            args = ['-u', 'root', '-e', 'sh', '-c', '"service docker start"'];
        }
        else {
            command = 'powershell';
            args = getPowershellHackArgs(`Start-Process "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe"`);
        }
    }
    else if (isPlatformLinux()) {
        command = 'sudo';
        args = ['systemctl', 'start', 'docker'];
    }
    else {
        throw new Error('Starting docker within ensureDockerRunning is only supported on Windows and Linux - you will have to start docker manually');
    }
    const result = await spawnAsync(command, args);
    if (result.code !== 0) {
        throw new Error('Unable to start docker - see error above');
    }
}
exports.ensureDockerRunning = ensureDockerRunning;
/**
 * Uses built-in NodeJS readline to ask a question and return the user's answer.
 * @param query The question to ask
 * @returns A Promise that resolves to the user's answer
 */
function askQuestion(query) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise(resolve => rl.question(`\n${query}\n`, ans => {
        rl.close();
        resolve(ans);
    }));
}
exports.askQuestion = askQuestion;
/**
 * A simple CLI prompt using the built-in NodeJS readline functionality to ask for confirmation.
 * @param question The question to ask
 * @returns A Promise that resolves to true if the user answers 'y' or 'yes', false otherwise
 */
function getConfirmation(question) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });
    return new Promise((resolve) => {
        rl.question(`\n  ${Emoji.RedQuestion} ${question}\n  ${Emoji.RightArrow} Proceed? (yes/no): `, (answer) => {
            rl.close();
            const confirmed = answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes';
            log(confirmed ? `  ${Emoji.GreenCheck} Proceeding\n` : `  ${Emoji.RedX} Aborting\n`);
            resolve(confirmed);
        });
    });
}
exports.getConfirmation = getConfirmation;
/**
 * Example of using {@link getConfirmation}.
 */
async function getConfirmationExample() {
    if (await getConfirmation('Do you even?')) {
        log('you do even');
    }
    else {
        log('you do not even');
    }
}
exports.getConfirmationExample = getConfirmationExample;
/**
 * Copy entries from a source .env file to a destination .env file for which the destination .env file does not already have entries.
 * If the destination .env file does not exist, it will be created and populated with the source .env file's values.
 *
 * This is useful for copying values from a .env.template file to a root .env file.
 *
 * For copying root .env files to other locations, use {@link overwriteEnvFile}.
 * @param sourcePath The path to the source .env file such as a `.env.template` file (use {@link overwriteEnvFile} for copying root .env files to other locations)
 * @param destinationPath The path to the destination .env file, such as the root .env file
 */
async function copyNewEnvValues(sourcePath, destinationPath) {
    await (0, generalUtilsInternal_js_1.copyEnv)(sourcePath, destinationPath, false);
}
exports.copyNewEnvValues = copyNewEnvValues;
/**
 * Copy entries from a source .env file to a destination .env file, overwriting any existing entries in the destination .env file.
 * If the destination .env file does not exist, it will be created and populated with the source .env file's values.
 *
 * This is useful for copying values from a root .env file to additional locations (server, client, docker-compose directory, etc.)
 * throughout your solution so you only have to manage one .env file.
 *
 * Note that this does not delete any existing entries in the destination .env file, which is useful if you have additional entries in
 * the destination .env file that you don't want to overwrite.
 *
 * For copying .env.template files to root .env files, use {@link copyNewEnvValues}.
 * @param sourcePath The path to the source .env file such as a root .env file (use {@link copyNewEnvValues} for .env.template files)
 * @param destinationPath The path to the destination .env file
 * @param suppressAddKeysMessages If true, messages about adding missing keys will not be logged (useful if you're always calling {@link copyModifiedEnv} after this call)
 */
async function overwriteEnvFile(sourcePath, destinationPath, suppressAddKeysMessages = false) {
    await (0, generalUtilsInternal_js_1.copyEnv)(sourcePath, destinationPath, true, suppressAddKeysMessages);
}
exports.overwriteEnvFile = overwriteEnvFile;
/**
 * Copy entries from a source .env file to a destination .env file, but only for the keys specified in keepKeys.
 * Will also modify entries in the destination .env file as specified in modifyEntries.
 * @param sourcePath The path to the source .env file
 * @param destinationPath The path to the destination .env file
 * @param keepKeys The keys to keep from the source .env file
 * @param modifyEntries The entries to modify in the destination .env file
 */
async function copyModifiedEnv(sourcePath, destinationPath, keepKeys, modifyEntries) {
    requireValidPath('sourcePath', sourcePath);
    const destPathDir = node_path_1.default.dirname(destinationPath);
    if (!node_fs_1.default.existsSync(destPathDir)) {
        await ensureDirectory(destPathDir);
    }
    const sourceDict = (0, generalUtilsInternal_js_1.getEnvAsDictionary)(sourcePath);
    const newDict = filterDictionary(sourceDict, key => keepKeys.includes(key));
    if (modifyEntries && Object.keys(modifyEntries).length > 0) {
        for (const [key, value] of Object.entries(modifyEntries)) {
            newDict[key] = value;
        }
    }
    const newSortedDict = sortDictionaryByKeyAsc(newDict);
    const newEnvFileContent = (0, generalUtilsInternal_js_1.dictionaryToEnvFileString)(newSortedDict);
    await promises_1.default.writeFile(destinationPath, newEnvFileContent);
}
exports.copyModifiedEnv = copyModifiedEnv;
/**
 * Filters a dictionary by key.
 * @param dict The dictionary to filter
 * @param predicate A function that returns true if the key should be included in the filtered dictionary
 * @returns A new dictionary with only the keys that passed the predicate
 */
function filterDictionary(dict, predicate) {
    // Notes to self:
    // - The second param of reduce is the initial value of the accumulator
    // - Reduce processes each element of the array and returns the accumulator for the next iteration
    // - In our case, the accumulator is a new dictionary that we're building up
    return Object.keys(dict)
        .filter(predicate)
        .reduce((accumulator, key) => {
        accumulator[key] = dict[key];
        return accumulator;
    }, {});
}
exports.filterDictionary = filterDictionary;
/**
 * Sorts a dictionary by key in ascending order.
 * @param dict The dictionary to sort
 * @returns A new dictionary sorted by key in ascending order
 */
function sortDictionaryByKeyAsc(dict) {
    const newSortedDict = Object.entries(dict).sort((a, b) => {
        if (a < b) {
            return -1;
        }
        if (a > b) {
            return 1;
        }
        return 0;
    });
    return Object.fromEntries(newSortedDict);
}
exports.sortDictionaryByKeyAsc = sortDictionaryByKeyAsc;
/**
 * Helper method to delete a .env file if it exists.
 * @param envPath The path to the .env file to delete
 */
async function deleteEnvIfExists(envPath) {
    // Just protecting ourselves from accidentally deleting something we didn't mean to
    if (envPath.endsWith('.env') === false) {
        throw new Error(`envPath must end with '.env': ${envPath}`);
    }
    // Using fsp.unlink will throw an error if it's a directory
    if (node_fs_1.default.existsSync(envPath)) {
        await promises_1.default.unlink(envPath);
    }
}
exports.deleteEnvIfExists = deleteEnvIfExists;
/**
 * Searches a directory recursively for files that match the specified pattern.
 * The filenamePattern is a simple text string with asterisks (*) for wildcards.
 * @param dir The directory to find files in
 * @param filenamePattern The pattern to match files against
 * @param options Specify a max depth to search, defaults to 5
 * @returns A Promise that resolves to an array of file paths that match the pattern
 */
async function findFilesRecursively(dir, filenamePattern, options) {
    (0, generalUtilsInternal_js_1.validateFindFilesRecursivelyParams)(dir, filenamePattern);
    const defaultOptions = { maxDepth: 5, excludeDirectoryNames: [], returnForwardSlashRelativePaths: false };
    const mergedOptions = { ...defaultOptions, ...options };
    // Convert the pattern to a regex
    const regex = new RegExp('^' + filenamePattern.split(/\*+/).map(escapeStringForRegex).join('.*') + '$');
    const matches = [];
    // Recursive function to search within directories
    async function searchDirectory(directory, depth) {
        var _a;
        if (depth > mergedOptions.maxDepth)
            return;
        const entries = await promises_1.default.readdir(directory, { withFileTypes: true });
        for (const entry of entries) {
            const fullPath = (0, node_path_1.resolve)(directory, entry.name);
            if (entry.isDirectory()) {
                // Check if directory is in the exclude list
                if (!((_a = mergedOptions.excludeDirectoryNames) === null || _a === void 0 ? void 0 : _a.includes(entry.name))) {
                    await searchDirectory(fullPath, depth + 1);
                }
            }
            else if (entry.isFile() && regex.test(entry.name)) {
                if (mergedOptions.returnForwardSlashRelativePaths) {
                    matches.push(node_path_1.default.relative(dir, fullPath).replace(/\\/g, '/'));
                }
                else {
                    matches.push(fullPath);
                }
            }
        }
    }
    await searchDirectory(dir, 1); // Start search from the first depth
    return matches;
}
exports.findFilesRecursively = findFilesRecursively;
/** Utility function to escape a string for use within regex */
function escapeStringForRegex(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
exports.escapeStringForRegex = escapeStringForRegex;
/**
 * Logs the provided 2-dimensional string array as a formatted table.
 *
 * @param data 2-dimensional string array where the first row is the column headers
 * @example
 *
 * logTable([
 *   ['Name', 'Age', 'Country'],
 *   ['Alice', '28', 'USA'],
 *   ['Bob', '22', 'Canada']
 * ])
 */
function logTable(data) {
    if (data.length === 0 || data[0].length === 0)
        return;
    const numColumns = data[0].length;
    const columnWidths = [];
    for (let i = 0; i < numColumns; i++) {
        columnWidths[i] = Math.max(...data.map(row => { var _a; return ((_a = row[i]) === null || _a === void 0 ? void 0 : _a.length) || 0; }));
    }
    const lineSeparator = columnWidths.map(width => '-'.repeat(width)).join(' + ');
    for (let i = 0; i < data.length; i++) {
        const paddedRowArray = data[i].map((cell, colIdx) => cell.padEnd(columnWidths[colIdx], ' '));
        log(paddedRowArray.join(' | '));
        if (i === 0)
            log(lineSeparator);
    }
}
exports.logTable = logTable;
/**
 * See {@link getPowershellHackArgs}.
 */
exports.powershellHackPrefix = `$env:PSModulePath = [Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'); `;
/**
 * Powershell doesn't load the system PSModulePath when running in a non-interactive shell.
 * This is a workaround to set the PSModulePath environment variable to the system value before running a powershell command.
 *
 * **Warning:** Do NOT use this for generating commands dynamically from user input as it could be used to execute arbitrary code.
 * This is meant solely for building up known commands that are not made up of unsanitized user input, and only at compile time.
 * See {@link winInstallCert} and {@link winUninstallCert} for examples of taking user input and inserting it safely into known commands.
 * @param command The powershell command to run
 * @returns An array of arguments to pass to {@link spawnAsync} with the "powershell" command as the first argument
 */
function getPowershellHackArgs(command) {
    return ['-NoProfile', '-ExecutionPolicy', 'Bypass', '-Command', `${exports.powershellHackPrefix}${command}`];
}
exports.getPowershellHackArgs = getPowershellHackArgs;
/**
 * Returns a humanized string representation of the number of milliseconds using ms, seconds, minutes, or hours.
 * @param milliseconds The number of milliseconds to humanize
 * @returns A humanized string representation of the number
 */
function humanizeTime(milliseconds) {
    let value;
    let unit;
    if (milliseconds < 1000) {
        return `${milliseconds} ms`;
    }
    if (milliseconds < 60000) {
        value = milliseconds / 1000;
        unit = 'second';
    }
    else if (milliseconds < 3600000) {
        value = milliseconds / 60000;
        unit = 'minute';
    }
    else {
        value = milliseconds / 3600000;
        unit = 'hour';
    }
    let stringValue = value.toFixed(2);
    if (stringValue.endsWith('.00')) {
        stringValue = stringValue.slice(0, -3);
    }
    else if (stringValue.endsWith('0')) {
        stringValue = stringValue.slice(0, -1);
    }
    if (stringValue !== '1') {
        unit += 's';
    }
    return `${stringValue} ${unit}`;
}
exports.humanizeTime = humanizeTime;
class ExtendedError extends Error {
    constructor(message, innerError) {
        super(message);
        this.innerError = innerError !== null && innerError !== void 0 ? innerError : null;
        Object.setPrototypeOf(this, ExtendedError.prototype);
    }
}
exports.ExtendedError = ExtendedError;
function getHostname(url) {
    requireString('url', url);
    trace(`attempting to convert url to hostname: ${url}`);
    try {
        const encodedUrl = encodeURI(url);
        const parsedUrl = new URL(encodedUrl.startsWith('http') ? encodedUrl : 'https://' + encodedUrl);
        trace(`parsed url: ${parsedUrl}`);
        return parsedUrl.hostname;
    }
    catch (e) {
        throw new ExtendedError("Invalid URL", e);
    }
}
exports.getHostname = getHostname;
async function isDirectory(path) {
    try {
        const stats = await promises_1.default.stat(path);
        return stats.isDirectory();
    }
    catch (err) {
        trace('error checking idDirectory (returning false)', err);
        return false;
    }
}
exports.isDirectory = isDirectory;
function isDirectorySync(path) {
    try {
        const stats = node_fs_1.default.statSync(path);
        return stats.isDirectory();
    }
    catch (err) {
        trace('error checking idDirectory (returning false)', err);
        return false;
    }
}
exports.isDirectorySync = isDirectorySync;
/**
 * This is a somewhat naive method but is useful if you rarely or never deal with unusual operating systems.
 * @returns `win`, `mac` or `linux`
 */
function getPlatformCode() {
    if (isPlatformWindows()) {
        return 'win';
    }
    if (isPlatformMac()) {
        return 'mac';
    }
    if (isPlatformLinux()) {
        return 'linux';
    }
    throw new Error('unrecognized platform: ' + (0, node_os_1.platform)());
}
exports.getPlatformCode = getPlatformCode;
/**
 * Tries connecting to a port to see if it's being listened on or not. It's likely that this won't work in a lot of scenarios, so use it at your own risk.
 * @param port The port to check
 * @returns `true` if the port is available, `false` otherwise
 */
async function isPortAvailable(port) {
    return new Promise((resolve) => {
        const tester = net.connect(port, '127.0.0.1');
        tester.on('connect', () => {
            tester.destroy();
            resolve(false); // port is in use
        });
        tester.on('error', (err) => {
            tester.destroy();
            if (err.code === 'ECONNREFUSED') {
                resolve(true); // port is available
            }
            else {
                resolve(false); // some other error occurred, assume port is in use
            }
        });
    });
}
exports.isPortAvailable = isPortAvailable;
/**
 * Returns the value for an environment variable or throws if it's undefined or null. Pass optional `throwOnEmpty` param to throw when the key exists but has an empty value.
 * @param varName The name of the environment variable to get.
 * @param throwOnEmpty Throw an error if key exists (not undefined or null) but is empty.
 * @returns
 */
function getRequiredEnvVar(varName, throwOnEmpty = true) {
    requireString('varName', varName);
    const val = process.env[varName];
    if (val === undefined || val === null) {
        throw new Error(`Missing required environment variable: ${varName}`);
    }
    if (throwOnEmpty && val.trim() === '') {
        throw new Error(`Required environment variable is empty: ${varName}`);
    }
    return val;
}
exports.getRequiredEnvVar = getRequiredEnvVar;
function getNormalizedError(err) {
    let lastErrorAsError;
    if (err === undefined || err === null) {
        lastErrorAsError = new Error('lastError was undefined or null');
    }
    else if (err instanceof Error) {
        lastErrorAsError = err;
    }
    else if (typeof err === 'string') {
        lastErrorAsError = new Error(err);
    }
    else if (err instanceof Object) {
        try {
            lastErrorAsError = new Error(JSON.stringify(err));
        }
        catch (jsonError) {
            lastErrorAsError = new Error('Object could not be serialized - could not normalize');
        }
    }
    else {
        lastErrorAsError = new Error(`Unknown error of type ${typeof err} - could not normalize`);
    }
    return lastErrorAsError;
}
exports.getNormalizedError = getNormalizedError;
/**
 * Call a function until it succeeds. Will stop after the number of calls specified by `maxCalls` param, or forever if -1 is passed.
 * @param func The function to call
 * @param maxCalls The maximum number of times to call the function before giving up. Pass -1 to retry forever.
 * @param delayMilliseconds The number of milliseconds to wait between calls
 * @param options Options for controlling the behavior of the retry. See {@link WithRetryOptions}.
 */
async function withRetryAsync(func, maxCalls, delayMilliseconds, options) {
    var _a, _b;
    let attemptNumber = 0;
    let lastError;
    const forever = maxCalls === -1;
    const defaultOptions = { initialDelayMilliseconds: 0, traceEnabled: false, logIntermediateErrors: false };
    const mergedOptions = { ...defaultOptions, ...options };
    const shouldLog = NodeCliUtilsConfig_js_1.config.traceEnabled || mergedOptions.traceEnabled;
    const retryLog = shouldLog ? log : () => { };
    const funcName = (_b = (_a = mergedOptions.functionLabel) !== null && _a !== void 0 ? _a : func.name) !== null && _b !== void 0 ? _b : 'anonymous';
    if (mergedOptions.initialDelayMilliseconds > 0) {
        retryLog(`initialDelayMilliseconds set to ${mergedOptions.initialDelayMilliseconds} - waiting before first try`);
        await sleep(mergedOptions.initialDelayMilliseconds);
    }
    // eslint-disable-next-line no-constant-condition
    while (true) {
        attemptNumber++;
        retryLog(`calling ${funcName} - attempt number ${attemptNumber}`);
        try {
            await func();
            retryLog(`attempt ${attemptNumber} was successful`);
            break;
        }
        catch (err) {
            if (mergedOptions.logIntermediateErrors || shouldLog) {
                console.error(err);
            }
            lastError = err;
        }
        if (!forever && attemptNumber === maxCalls) {
            throw new ExtendedError(`Failed to run method with retry after ${maxCalls} attempts`, getNormalizedError(lastError));
        }
        retryLog(`attempt number ${attemptNumber} failed - waiting ${delayMilliseconds} milliseconds before trying again`);
        await sleep(delayMilliseconds);
    }
}
exports.withRetryAsync = withRetryAsync;
/**
 * Collapses each instance of consecutive whitespace characters into a single space.
 */
function collapseWhitespace(str) {
    return str.replace(/\s+/g, ' ');
}
exports.collapseWhitespace = collapseWhitespace;
/**
 * Check if a string is a valid directory name. This is a very simple check that just makes sure the string doesn't contain any invalid characters.
 * @param dirName The directory name to check
 * @returns `true` if the directory name is valid, `false` otherwise
 */
function isValidDirName(dirName) {
    // List of generally invalid characters for directory names in Windows, macOS, and Linux
    const invalidChars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*'];
    for (const char of dirName) {
        if (invalidChars.includes(char) || char.charCodeAt(0) <= 31) {
            return false;
        }
    }
    return true;
}
exports.isValidDirName = isValidDirName;
function hasWhitespace(str) {
    return /\s/.test(str);
}
exports.hasWhitespace = hasWhitespace;
function stripShellMetaCharacters(input) {
    const metaCharacters = [
        '\\', '`', '$', '"', "'", '<', '>', '|', ';', ' ',
        '&', '(', ')', '[', ']', '{', '}', '?', '*', '#', '~', '^'
    ];
    const escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    const regex = new RegExp(`[${metaCharacters.map(escapeRegex).join('')}]`, 'g');
    return input.replace(regex, '');
}
exports.stripShellMetaCharacters = stripShellMetaCharacters;
var Emoji;
(function (Emoji) {
    Emoji["RightArrow"] = "\u27A1\uFE0F";
    Emoji["LeftArrow"] = "\u2B05\uFE0F";
    Emoji["GreenCheck"] = "\u2705";
    Emoji["Warning"] = "\u26A0\uFE0F";
    Emoji["Lightning"] = "\u26A1";
    Emoji["Exclamation"] = "\u2757";
    Emoji["RedQuestion"] = "\u2753";
    Emoji["RedX"] = "\u274C";
    Emoji["Info"] = "\u2139\uFE0F";
    Emoji["SadFace"] = "\uD83D\uDE22";
    Emoji["Tools"] = "\uD83D\uDEE0\uFE0F";
    Emoji["NoEntry"] = "\u26D4";
    Emoji["Stop"] = "\uD83D\uDED1";
    Emoji["Certificate"] = "\uD83D\uDCDC";
    Emoji["Key"] = "\uD83D\uDD11";
})(Emoji || (exports.Emoji = Emoji = {}));
/**
 * Converts a windows path to a WSL path (Windows Subsystem for Linux) if it's an absolute path, otherwise returns it unchanged.
 *
 * Normally you can use `path.resolve()` to convert paths to whatever is appropriate for the OS, but if you're running on Windows and need to spawn a
 * command with `wsl yourCommand`, then you'll want to use this function to convert any parameters that are paths so that they can be resolved within WSL.
 * Because the intended use of this function is for passing params around, most use cases will also require paths with spaces or single quotes to be
 * wrapped in quotes, so `wrapInQuotesIfSpaces` defaults to true.
 * @param winPath The Windows path.
 * @param wrapInQuotesIfSpaces Defaults to `true`. If `true` and the `winPath` passed has spaces, the returned string will be wrapped in quotes.
 * Single quotes will be used unless there are single quote characters within the path, in which case it will be wrapped in double quotes.
 * @returns The wsl equivalent path.
 */
function toWslPath(winPath, wrapInQuotesIfSpaces = true) {
    if (!node_path_1.default.isAbsolute(winPath)) {
        return winPath;
    }
    const drive = winPath.charAt(0).toLowerCase();
    const remainingPath = winPath.substring(2).replace(/\\/g, '/').replace(/\/{2,}/g, '/');
    const wslPath = node_path_1.default.posix.join(`/mnt/${drive}`, remainingPath);
    if (!wrapInQuotesIfSpaces) {
        return wslPath;
    }
    if (wslPath.includes("'")) {
        return `"${wslPath}"`;
    }
    if (wslPath.includes(' ')) {
        return `'${wslPath}'`;
    }
    return wslPath;
}
exports.toWslPath = toWslPath;
//# sourceMappingURL=data:application/json;base64,