"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NixUtil = void 0;
const generalUtils_js_1 = require("./generalUtils.js");
// Untested - moved over from old project
class NixUtil {
    constructor() {
        this.sudoerUsername = '';
        this.populateSudoerErrorMessage = '';
        if ((0, generalUtils_js_1.isPlatformWindows)()) {
            throw new Error('NixUtil is not supported on Windows');
        }
        this.tryPopulateSudoerUsername();
    }
    async tryPopulateSudoerUsername() {
        const sudoerId = process.env.SUDO_UID;
        if (sudoerId === undefined) {
            this.populateSudoerErrorMessage = 'cannot get sudoer username - process not started with sudo';
            return;
        }
        (0, generalUtils_js_1.log)(`attempting to find username for sudoer id ${sudoerId}`);
        const childProcess = (0, generalUtils_js_1.simpleSpawnSync)('id', ['-nu', sudoerId]);
        if (childProcess.code !== 0) {
            throw new Error(`Unable to get sudoer username - id command exited with code ${childProcess.code}. Stderr: ${childProcess.stderr}`);
        }
        let username = childProcess.stdout;
        if (!username) {
            this.populateSudoerErrorMessage = 'unable to get sudoer username - id command did not return a username';
            return;
        }
        username = username.replace('\n', '');
        (0, generalUtils_js_1.log)(`using sudoer username: ${username}`);
        this.sudoerUsername = username;
    }
    async runAsSudoer(cmd, cwd) {
        if (!this.sudoerUsername) {
            if (this.populateSudoerErrorMessage) {
                throw new Error(this.populateSudoerErrorMessage);
            }
            else {
                throw new Error('sudoer username was not populated - cannot continue');
            }
        }
        const cmdArgs = `-H -u ${this.sudoerUsername} bash -c`.split(' ');
        cmdArgs.push(`'${cmd}'`);
        await (0, generalUtils_js_1.spawnAsync)('sudo', cmdArgs, { cwd: cwd !== null && cwd !== void 0 ? cwd : process.cwd() });
    }
}
exports.NixUtil = NixUtil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTml4VXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9OaXhVdGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVEQUF1RjtBQUV2Rix5Q0FBeUM7QUFDekMsTUFBYSxPQUFPO0lBSWxCO1FBSFEsbUJBQWMsR0FBVyxFQUFFLENBQUE7UUFDM0IsK0JBQTBCLEdBQVcsRUFBRSxDQUFBO1FBRzdDLElBQUksSUFBQSxtQ0FBaUIsR0FBRSxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQTtTQUN2RDtRQUVELElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFTyxLQUFLLENBQUMseUJBQXlCO1FBQ3JDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBO1FBRXJDLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixJQUFJLENBQUMsMEJBQTBCLEdBQUcsNERBQTRELENBQUE7WUFDOUYsT0FBTTtTQUNQO1FBRUQsSUFBQSxxQkFBRyxFQUFDLDZDQUE2QyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRTVELE1BQU0sWUFBWSxHQUFHLElBQUEsaUNBQWUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUU3RCxJQUFJLFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELFlBQVksQ0FBQyxJQUFJLGFBQWEsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7U0FDcEk7UUFFRCxJQUFJLFFBQVEsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFBO1FBRWxDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixJQUFJLENBQUMsMEJBQTBCLEdBQUcsc0VBQXNFLENBQUE7WUFDeEcsT0FBTTtTQUNQO1FBRUQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRXJDLElBQUEscUJBQUcsRUFBQywwQkFBMEIsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUV6QyxJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQTtJQUNoQyxDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFXLEVBQUUsR0FBWTtRQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQTthQUNqRDtpQkFBTTtnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUE7YUFDdkU7U0FDRjtRQUVELE1BQU0sT0FBTyxHQUFHLFNBQVMsSUFBSSxDQUFDLGNBQWMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtRQUN4QixNQUFNLElBQUEsNEJBQVUsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsYUFBSCxHQUFHLGNBQUgsR0FBRyxHQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDbEUsQ0FBQztDQUNGO0FBdkRELDBCQXVEQyJ9