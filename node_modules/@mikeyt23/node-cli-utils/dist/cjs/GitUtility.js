"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloneProject = exports.isValidBranchName = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const promises_1 = __importDefault(require("node:fs/promises"));
const generalUtils_js_1 = require("./generalUtils.js");
const node_path_1 = require("node:path");
class GitUtility {
    constructor(dependencies = {}) {
        var _a;
        this.spawnAsyncFn = (_a = dependencies.spawnAsyncFn) !== null && _a !== void 0 ? _a : generalUtils_js_1.spawnAsync;
    }
    isValidBranchName(branchName) {
        if (branchName.startsWith('-') || branchName.endsWith('/') || branchName.endsWith('.') || branchName.endsWith('@{') || branchName.includes('..')) {
            return false;
        }
        const invalidChars = [' ', '~', '^', ':', '\\', '*', '?', '[', ']', '/'];
        for (const char of branchName) {
            if (invalidChars.includes(char)) {
                return false;
            }
        }
        return true;
    }
    async cloneProject(repoUrl, localDestPath, branchName = 'main', deleteGitFolder = true) {
        if (node_fs_1.default.existsSync(localDestPath)) {
            throw new Error(`Cannot clone project - destination path already exists: ${localDestPath}`);
        }
        if (!this.isValidBranchName(branchName)) {
            throw new Error(`Cannot clone project - invalid branch name: ${branchName}`);
        }
        await (0, generalUtils_js_1.mkdirp)(localDestPath);
        const cloneArgs = `clone -b ${branchName} --single-branch --depth 1 ${repoUrl} ${localDestPath}`.split(' ');
        const result = await this.spawnAsyncFn('git', cloneArgs);
        if (result.code !== 0) {
            throw new Error(`Failed to clone project '${result.stderr}' to '${localDestPath}'`);
        }
        if (deleteGitFolder) {
            await promises_1.default.rm((0, node_path_1.join)(localDestPath, '.git'), { recursive: true });
        }
    }
}
const defaultGitUtility = new GitUtility();
exports.isValidBranchName = defaultGitUtility.isValidBranchName;
exports.cloneProject = defaultGitUtility.cloneProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l0VXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HaXRVdGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNEQUF3QjtBQUN4QixnRUFBa0M7QUFDbEMsdURBQXNEO0FBQ3RELHlDQUFnQztBQU1oQyxNQUFNLFVBQVU7SUFHZCxZQUFZLGVBQWdELEVBQUU7O1FBQzVELElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBQSxZQUFZLENBQUMsWUFBWSxtQ0FBSSw0QkFBVSxDQUFBO0lBQzdELENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxVQUFrQjtRQUNsQyxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoSixPQUFPLEtBQUssQ0FBQTtTQUNiO1FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUN4RSxLQUFLLE1BQU0sSUFBSSxJQUFJLFVBQVUsRUFBRTtZQUM3QixJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQy9CLE9BQU8sS0FBSyxDQUFBO2FBQ2I7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBZSxFQUFFLGFBQXFCLEVBQUUsYUFBcUIsTUFBTSxFQUFFLGtCQUEyQixJQUFJO1FBQ3JILElBQUksaUJBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsYUFBYSxFQUFFLENBQUMsQ0FBQTtTQUM1RjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsVUFBVSxFQUFFLENBQUMsQ0FBQTtTQUM3RTtRQUVELE1BQU0sSUFBQSx3QkFBTSxFQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRTNCLE1BQU0sU0FBUyxHQUFHLFlBQVksVUFBVSw4QkFBOEIsT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzRyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ3hELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxDQUFDLE1BQU0sU0FBUyxhQUFhLEdBQUcsQ0FBQyxDQUFBO1NBQ3BGO1FBRUQsSUFBSSxlQUFlLEVBQUU7WUFDbkIsTUFBTSxrQkFBRyxDQUFDLEVBQUUsQ0FBQyxJQUFBLGdCQUFJLEVBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7U0FDL0Q7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGlCQUFpQixHQUFHLElBQUksVUFBVSxFQUFFLENBQUE7QUFFN0IsUUFBQSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQTtBQUN2RCxRQUFBLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxZQUFZLENBQUEifQ==