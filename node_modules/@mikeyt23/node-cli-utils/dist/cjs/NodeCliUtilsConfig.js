"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.NodeCliUtilsConfig = void 0;
/**
 * Config to control a few misc settings in the node-cli-utils package. This module exports a singleton instance.
 */
class NodeCliUtilsConfig {
    constructor() {
        this._traceEnabled = false;
        this._orphanProtectionPollingIntervalMillis = 15000;
        this._orphanProtectionLoggingEnabled = false;
        this._orphanProtectionLoggingPath = './orphanProtection.log';
        this._useWslPrefixForDockerCommands = false;
    }
    get traceEnabled() {
        return this._traceEnabled;
    }
    set traceEnabled(value) {
        this._traceEnabled = value;
    }
    get orphanProtectionPollingIntervalMillis() {
        return this._orphanProtectionPollingIntervalMillis;
    }
    set orphanProtectionPollingIntervalMillis(value) {
        this._orphanProtectionPollingIntervalMillis = value;
    }
    get orphanProtectionLoggingEnabled() {
        return this._orphanProtectionLoggingEnabled;
    }
    set orphanProtectionLoggingEnabled(value) {
        this._orphanProtectionLoggingEnabled = value;
    }
    get orphanProtectionLoggingPath() {
        return this._orphanProtectionLoggingPath;
    }
    get useWslPrefixForDockerCommands() {
        return this._useWslPrefixForDockerCommands;
    }
    /**
     * If `true`, docker commands that normally just run `docker` will use `wsl docker` instead. This requires any paths
     * passed to be wsl paths, but these should be handled internally with no additional action required by the caller.
     */
    set useWslPrefixForDockerCommands(value) {
        this._useWslPrefixForDockerCommands = value;
    }
}
exports.NodeCliUtilsConfig = NodeCliUtilsConfig;
/**
 * Singleton instance of {@link NodeCliUtilsConfig}.
 */
exports.config = new NodeCliUtilsConfig();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm9kZUNsaVV0aWxzQ29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL05vZGVDbGlVdGlsc0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBQS9CO1FBQ1Usa0JBQWEsR0FBWSxLQUFLLENBQUE7UUFDOUIsMkNBQXNDLEdBQUcsS0FBSyxDQUFBO1FBQzlDLG9DQUErQixHQUFHLEtBQUssQ0FBQTtRQUN2QyxpQ0FBNEIsR0FBRyx3QkFBd0IsQ0FBQTtRQUN2RCxtQ0FBOEIsR0FBWSxLQUFLLENBQUE7SUF5Q3pELENBQUM7SUF2Q0MsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFBO0lBQzNCLENBQUM7SUFFRCxJQUFJLFlBQVksQ0FBQyxLQUFjO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFBO0lBQzVCLENBQUM7SUFFRCxJQUFJLHFDQUFxQztRQUN2QyxPQUFPLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQTtJQUNwRCxDQUFDO0lBRUQsSUFBSSxxQ0FBcUMsQ0FBQyxLQUFhO1FBQ3JELElBQUksQ0FBQyxzQ0FBc0MsR0FBRyxLQUFLLENBQUE7SUFDckQsQ0FBQztJQUVELElBQUksOEJBQThCO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFBO0lBQzdDLENBQUM7SUFFRCxJQUFJLDhCQUE4QixDQUFDLEtBQWM7UUFDL0MsSUFBSSxDQUFDLCtCQUErQixHQUFHLEtBQUssQ0FBQTtJQUM5QyxDQUFDO0lBRUQsSUFBSSwyQkFBMkI7UUFDN0IsT0FBTyxJQUFJLENBQUMsNEJBQTRCLENBQUE7SUFDMUMsQ0FBQztJQUVELElBQUksNkJBQTZCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLDhCQUE4QixDQUFBO0lBQzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJLDZCQUE2QixDQUFDLEtBQWM7UUFDOUMsSUFBSSxDQUFDLDhCQUE4QixHQUFHLEtBQUssQ0FBQTtJQUM3QyxDQUFDO0NBQ0Y7QUE5Q0QsZ0RBOENDO0FBRUQ7O0dBRUc7QUFDVSxRQUFBLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUEifQ==