"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertErrorMessageEquals = exports.assertErrorMessageIncludes = exports.assertErrorMessageStartsWith = exports.fileExistsAndIsNonZero = exports.ensureEmptyTempDir = exports.only = exports.fixturesDir = exports.tempDir = void 0;
const node_assert_1 = __importDefault(require("node:assert"));
const node_fs_1 = __importDefault(require("node:fs"));
const promises_1 = __importDefault(require("node:fs/promises"));
exports.tempDir = './test/temp';
exports.fixturesDir = './test/fixtures';
exports.only = { only: true }; // Convenience object to make it easier to mark tests as "only"
const ensureEmptyTempDir = async (dir) => {
    if (!dir) {
        throw new Error('dir is required');
    }
    if (!dir.startsWith('test/temp') && !dir.startsWith('test\\temp') && !dir.startsWith('./test/temp') && !dir.startsWith('.\\test\\temp')) {
        throw new Error(`dir must start with 'test/temp': ${dir}`);
    }
    if (node_fs_1.default.existsSync(dir)) {
        await promises_1.default.rm(dir, { recursive: true, force: true });
    }
    await promises_1.default.mkdir(dir, { recursive: true });
};
exports.ensureEmptyTempDir = ensureEmptyTempDir;
function fileExistsAndIsNonZero(filePath) {
    try {
        const stats = node_fs_1.default.statSync(filePath);
        return stats.isFile() && stats.size > 0;
    }
    catch (err) {
        const e = err;
        if (e.code === 'ENOENT') {
            return false; // File doesn't exist
        }
        throw err; // Rethrow other errors
    }
}
exports.fileExistsAndIsNonZero = fileExistsAndIsNonZero;
function assertErrorMessageStartsWith(err, expectedStartsWith) {
    (0, node_assert_1.default)(err instanceof Error);
    node_assert_1.default.strictEqual(err.message.startsWith(expectedStartsWith), true, `Error message did not start with expected value. Actual: "${err.message}".`);
    return true;
}
exports.assertErrorMessageStartsWith = assertErrorMessageStartsWith;
function assertErrorMessageIncludes(err, expectedIncludes) {
    (0, node_assert_1.default)(err instanceof Error);
    node_assert_1.default.strictEqual(err.message.includes(expectedIncludes), true, `Error message did not include the expected value. Actual: "${err.message}".`);
    return true;
}
exports.assertErrorMessageIncludes = assertErrorMessageIncludes;
function assertErrorMessageEquals(err, expected) {
    (0, node_assert_1.default)(err instanceof Error);
    node_assert_1.default.strictEqual(err.message, expected, `Error message did not equal the expected value. Actual: "${err.message}".`);
    return true;
}
exports.assertErrorMessageEquals = assertErrorMessageEquals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4REFBZ0M7QUFDaEMsc0RBQXdCO0FBQ3hCLGdFQUFrQztBQUVyQixRQUFBLE9BQU8sR0FBRyxhQUFhLENBQUE7QUFDdkIsUUFBQSxXQUFXLEdBQUcsaUJBQWlCLENBQUE7QUFDL0IsUUFBQSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUEsQ0FBQywrREFBK0Q7QUFFM0YsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDdEQsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtLQUNuQztJQUNELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3ZJLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLEdBQUcsRUFBRSxDQUFDLENBQUE7S0FDM0Q7SUFDRCxJQUFJLGlCQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3RCLE1BQU0sa0JBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtLQUNwRDtJQUNELE1BQU0sa0JBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFBO0FBWFksUUFBQSxrQkFBa0Isc0JBVzlCO0FBRUQsU0FBZ0Isc0JBQXNCLENBQUMsUUFBZ0I7SUFDckQsSUFBSTtRQUNGLE1BQU0sS0FBSyxHQUFHLGlCQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0tBQ3hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLENBQUMsR0FBRyxHQUF3QixDQUFBO1FBQ2xDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUEsQ0FBQyxxQkFBcUI7U0FDbkM7UUFDRCxNQUFNLEdBQUcsQ0FBQSxDQUFDLHVCQUF1QjtLQUNsQztBQUNILENBQUM7QUFYRCx3REFXQztBQUVELFNBQWdCLDRCQUE0QixDQUFDLEdBQVksRUFBRSxrQkFBMEI7SUFDbkYsSUFBQSxxQkFBTSxFQUFDLEdBQUcsWUFBWSxLQUFLLENBQUMsQ0FBQTtJQUM1QixxQkFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksRUFBRSw2REFBNkQsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUE7SUFDbEosT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBSkQsb0VBSUM7QUFFRCxTQUFnQiwwQkFBMEIsQ0FBQyxHQUFZLEVBQUUsZ0JBQXdCO0lBQy9FLElBQUEscUJBQU0sRUFBQyxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUE7SUFDNUIscUJBQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxJQUFJLEVBQUUsOERBQThELEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFBO0lBQy9JLE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUpELGdFQUlDO0FBRUQsU0FBZ0Isd0JBQXdCLENBQUMsR0FBWSxFQUFFLFFBQWdCO0lBQ3JFLElBQUEscUJBQU0sRUFBQyxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUE7SUFDNUIscUJBQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsNERBQTRELEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFBO0lBQ3RILE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUpELDREQUlDIn0=