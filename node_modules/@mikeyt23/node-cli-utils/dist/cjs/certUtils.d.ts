/** Control what is logged when running certUtils functions. */
export interface CertLogOptions {
    logSpawnOutput: boolean;
    logTraceMessages: boolean;
    logElevatedPermissionsMessage: boolean;
    logSuccess: boolean;
}
export interface GenerateCertOptions extends CertLogOptions {
    /** The directory to write the generated cert files to. Defaults to `./cert`. */
    outputDirectory: string;
}
/** Subject, thumbprint or path to the pfx file. Used with the {@link winUninstallCert} function. */
export type CertIdentifier = string | {
    thumbprint: string;
} | {
    pfxPath: string;
};
/** The subject or path to the pfx file. Used with the {@link winCertIsInstalled} function. */
export type CertIdentifierWithoutThumbprint = string | {
    pfxPath: string;
};
/** Cert info returned by {@link winGetPfxInfo}. */
export type CertInfo = {
    subject: string;
    thumbprint: string;
    pfxPath: string;
};
/**
 * Wrapper function for calling openssl to generate a self-signed cert to be used for developing a local website with trusted https.
 * @param url The url to generate a cert for. This will be used as the common name (CN) in the cert as well as the filename for the generated cert files.
 * @param options Options for generating the cert.
 * @returns The path to the generated pfx file.
 */
export declare function generateCertWithOpenSsl(url: string, options?: Partial<GenerateCertOptions>): Promise<string>;
/**
 * Uses Powershell to install a cert to the local machine's trusted root store. Must have elevated permissions.
 * If the cert is already installed, this function will do nothing.
 * @param pfxPath The path to the pfx file to install.
 */
export declare function winInstallCert(pfxPath: string, options?: Partial<CertLogOptions>): Promise<void>;
/**
 * Uses Powershell to check if a cert is already installed to the local machine's trusted root store.
 * Uses the subject of the cert in order to avoid false negatives from regenerating the same self-signed cert
 * with the same subject but different thumbprint. Note that this method is geared towards use with certs generated
 * with the {@link generateCertWithOpenSsl} function, so this may not work using subject if your subject is not precisely "`CN=<url>`".
 * @param identifier The subject or path to the pfx file of the cert to check.
 * @returns `true` if the cert is already installed, `false` otherwise.
 */
export declare function winCertIsInstalled(identifier: CertIdentifierWithoutThumbprint, options?: Partial<CertLogOptions>): Promise<boolean>;
/**
 * Uses Powershell to uninstall a cert from the local machine's trusted root store. Must have elevated permissions.
 * @param identifier The subject, thumbprint or path to the pfx file of the cert to uninstall.
 * @param options Options for uninstalling the cert.
 */
export declare function winUninstallCert(identifier: CertIdentifier, options?: Partial<CertLogOptions>): Promise<void>;
/**
 * Uses Powershell to get info about a cert.
 * @param pfxPath The path to the pfx file to get info for.
 * @returns The subject, thumbprint and pfxPath of the cert.
 */
export declare function winGetPfxInfo(pfxPath: string): Promise<CertInfo>;
/**
 * Does not actually do anything - just outputs the manual instructions for installing a cert for use by chrome on linux.
 */
export declare function linuxInstallCert(): void;
//# sourceMappingURL=certUtils.d.ts.map