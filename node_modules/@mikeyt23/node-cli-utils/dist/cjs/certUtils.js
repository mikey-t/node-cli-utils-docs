"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linuxInstallCert = exports.winGetPfxInfo = exports.winUninstallCert = exports.winCertIsInstalled = exports.winInstallCert = exports.generateCertWithOpenSsl = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const generalUtils_js_1 = require("./generalUtils.js");
const colors_js_1 = require("./colors.js");
const defaultCertLogOptions = {
    logSpawnOutput: false,
    logTraceMessages: false,
    logElevatedPermissionsMessage: true,
    logSuccess: true
};
/**
 * Wrapper function for calling openssl to generate a self-signed cert to be used for developing a local website with trusted https.
 * @param url The url to generate a cert for. This will be used as the common name (CN) in the cert as well as the filename for the generated cert files.
 * @param options Options for generating the cert.
 * @returns The path to the generated pfx file.
 */
async function generateCertWithOpenSsl(url, options) {
    (0, generalUtils_js_1.requireString)('url', url);
    throwIfMaybeBadUrlChars(url);
    const isMac = (0, generalUtils_js_1.isPlatformMac)();
    const mergedOptions = { ...defaultCertLogOptions, outputDirectory: './cert', ...options };
    const spawnArgs = { cwd: mergedOptions.outputDirectory, stdio: mergedOptions.logSpawnOutput ? 'inherit' : 'pipe' };
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, 'checking if openssl is installed');
    let brewOpenSslPath = '';
    if (!isMac) {
        const openSslPath = (0, generalUtils_js_1.whichSync)('openssl').location;
        if (!openSslPath) {
            throw Error('openssl is required but was not found');
        }
        (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `using openssl at: ${openSslPath}`);
    }
    else if (isMac) {
        const brewOpenSslDirectory = getBrewOpensslPath();
        if (!brewOpenSslDirectory) {
            throw Error('openssl (brew version) is required but was not found');
        }
        brewOpenSslPath = `${getBrewOpensslPath()}/bin/openssl`;
        if (!node_fs_1.default.existsSync(brewOpenSslPath)) {
            throw Error(`openssl (brew version) is required but was not found at: ${brewOpenSslPath}`);
        }
        else {
            (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `using openssl at: ${brewOpenSslPath}`);
        }
    }
    (0, generalUtils_js_1.ensureDirectory)(mergedOptions.outputDirectory);
    const crtName = url + '.crt';
    const keyName = url + '.key';
    const pfxName = url + '.pfx';
    const sanCnfName = url + '.cnf';
    const filesToCheck = [crtName, keyName, pfxName, sanCnfName];
    for (const file of filesToCheck) {
        const filePath = node_path_1.default.join(mergedOptions.outputDirectory, file);
        if (node_fs_1.default.existsSync(filePath)) {
            throw Error(`${generalUtils_js_1.Emoji.Stop} File ${filePath} already exists. Delete or rename all of the following files from '${mergedOptions.outputDirectory}' if you want to generate a new cert: ${filesToCheck.join(', ')}.`);
        }
    }
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `writing ${sanCnfName} file for use with openssl command`);
    const sanCnfContents = getSanCnfFileContents(url);
    const sanCnfPath = node_path_1.default.join(mergedOptions.outputDirectory, sanCnfName);
    await promises_1.default.writeFile(sanCnfPath, sanCnfContents);
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `attempting to generate cert ${pfxName}`);
    const genKeyAndCrtArgs = `req -x509 -newkey rsa:4096 -sha256 -days 3650 -nodes -keyout ${keyName} -out ${crtName} -subj /CN=${url} -config ${sanCnfName}`.split(' ');
    const command = isMac ? brewOpenSslPath : 'openssl';
    let result = await (0, generalUtils_js_1.spawnAsync)(command, genKeyAndCrtArgs, spawnArgs);
    throwIfSpawnResultError(result);
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, 'converting key and crt to pfx');
    const convertToPfxArgs = `pkcs12 -certpbe AES-256-CBC -export -out ${pfxName} -aes256 -inkey ${keyName} -in ${crtName} -password pass:`.split(' ');
    result = await (0, generalUtils_js_1.spawnAsync)(command, convertToPfxArgs, spawnArgs);
    throwIfSpawnResultError(result);
    const pfxPath = node_path_1.default.join(mergedOptions.outputDirectory, pfxName);
    (0, generalUtils_js_1.logIf)(mergedOptions.logSuccess, `${generalUtils_js_1.Emoji.GreenCheck} Successfully generated cert: ${pfxPath}`);
    return pfxPath;
}
exports.generateCertWithOpenSsl = generateCertWithOpenSsl;
/**
 * Uses Powershell to install a cert to the local machine's trusted root store. Must have elevated permissions.
 * If the cert is already installed, this function will do nothing.
 * @param pfxPath The path to the pfx file to install.
 */
async function winInstallCert(pfxPath, options) {
    if (!(0, generalUtils_js_1.isPlatformWindows)()) {
        throw Error('winInstallCert is only supported on Windows');
    }
    validatePfxPath(pfxPath);
    const mergedOptions = { ...defaultCertLogOptions, ...options };
    (0, generalUtils_js_1.logIf)(mergedOptions.logElevatedPermissionsMessage, getRequiresElevatedPermissionsMessage(true));
    if (await winCertIsInstalled({ pfxPath }, mergedOptions)) {
        const certInfo = await winGetPfxInfo(pfxPath);
        (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `${generalUtils_js_1.Emoji.Warning} certificate '${pfxPath}' with subject '${certInfo.subject}' is already installed - to install it again, first uninstall it manually or with the winUninstallCert function`);
        return;
    }
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `installing cert '${pfxPath}'`);
    const psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Import-PfxCertificate -FilePath '${pfxPath}' -CertStoreLocation Cert:\\LocalMachine\\Root`);
    const result = await (0, generalUtils_js_1.spawnAsync)('powershell', psCommandArgs, { stdio: mergedOptions.logSpawnOutput ? 'inherit' : 'pipe' });
    throwIfSpawnResultError(result);
    (0, generalUtils_js_1.logIf)(mergedOptions.logSuccess, `${generalUtils_js_1.Emoji.GreenCheck} Successfully installed cert: ${pfxPath}`);
}
exports.winInstallCert = winInstallCert;
/**
 * Uses Powershell to check if a cert is already installed to the local machine's trusted root store.
 * Uses the subject of the cert in order to avoid false negatives from regenerating the same self-signed cert
 * with the same subject but different thumbprint. Note that this method is geared towards use with certs generated
 * with the {@link generateCertWithOpenSsl} function, so this may not work using subject if your subject is not precisely "`CN=<url>`".
 * @param identifier The subject or path to the pfx file of the cert to check.
 * @returns `true` if the cert is already installed, `false` otherwise.
 */
async function winCertIsInstalled(identifier, options) {
    if (!(0, generalUtils_js_1.isPlatformWindows)()) {
        throw new Error('winCertIsInstalled is only supported on Windows');
    }
    const mergedOptions = { ...defaultCertLogOptions, ...options };
    let psCommandArgs;
    // Get the count of certs installed with the same subject as the one we're trying to install
    if (typeof identifier === 'string') {
        (0, generalUtils_js_1.requireString)('subject', identifier);
        validateSubject(identifier);
        const subject = identifier.startsWith('CN=') ? identifier : `CN=${identifier}`;
        psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Write-Host (Get-ChildItem Cert:\\LocalMachine\\Root | Where-Object { $_.Subject -eq '${subject}' } | Measure-Object).Count`);
    }
    else if ('pfxPath' in identifier) {
        validatePfxPath(identifier.pfxPath);
        psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Write-Host (Get-ChildItem Cert:\\LocalMachine\\Root | Where-Object { $_.Subject -eq (Get-PfxCertificate -FilePath '${identifier.pfxPath}').Subject } | Measure-Object).Count`);
    }
    const tracePart = (typeof identifier === 'string') ? `subject ${identifier}` : `pfxPath ${identifier.pfxPath}`;
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `checking if cert with ${tracePart} is already installed`);
    const result = await (0, generalUtils_js_1.spawnAsync)('powershell', psCommandArgs, { stdio: 'pipe' });
    throwIfSpawnResultError(result);
    const lines = (0, generalUtils_js_1.stringToNonEmptyLines)(result.stdout);
    if (lines.length !== 1) {
        throw new Error(`Unexpected output from powershell command to check if the cert is already installed: ${result.stdout}`);
    }
    return lines[0].trim() !== '0';
}
exports.winCertIsInstalled = winCertIsInstalled;
/**
 * Uses Powershell to uninstall a cert from the local machine's trusted root store. Must have elevated permissions.
 * @param identifier The subject, thumbprint or path to the pfx file of the cert to uninstall.
 * @param options Options for uninstalling the cert.
 */
async function winUninstallCert(identifier, options) {
    if (!(0, generalUtils_js_1.isPlatformWindows)()) {
        throw new Error('winUninstallCert is only supported on Windows');
    }
    const mergedOptions = { ...defaultCertLogOptions, ...options };
    (0, generalUtils_js_1.logIf)(mergedOptions.logElevatedPermissionsMessage, getRequiresElevatedPermissionsMessage(false));
    let psCommandArgs;
    if (typeof identifier === 'string') {
        (0, generalUtils_js_1.requireString)('subject', identifier);
        validateSubject(identifier);
        psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Get-ChildItem Cert:\\LocalMachine\\Root | Where-Object { $_.Subject -match '${identifier}' } | Remove-Item`);
    }
    else if ('thumbprint' in identifier) {
        validateNoQuotes('thumbprint', identifier.thumbprint);
        psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Get-ChildItem Cert:\\LocalMachine\\Root | Where-Object { $_.Thumbprint -eq '${identifier.thumbprint}' } | Remove-Item`);
    }
    else if ('pfxPath' in identifier) {
        validatePfxPath(identifier.pfxPath);
        psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`$thumbprint = (Get-PfxCertificate -FilePath '${identifier.pfxPath}').Thumbprint; Get-ChildItem Cert:\\LocalMachine\\Root | Where-Object { $_.Thumbprint -eq $thumbprint } | Remove-Item`);
    }
    const tracePart = typeof identifier === 'string' ? `'${identifier}'` : JSON.stringify(identifier);
    (0, generalUtils_js_1.logIf)(mergedOptions.logTraceMessages, `uninstalling cert ${tracePart}`);
    const result = await (0, generalUtils_js_1.spawnAsync)('powershell', psCommandArgs, { stdio: mergedOptions.logSpawnOutput ? 'inherit' : 'pipe' });
    throwIfSpawnResultError(result);
    (0, generalUtils_js_1.logIf)(mergedOptions.logSuccess, `${generalUtils_js_1.Emoji.GreenCheck} Successfully uninstalled cert`);
}
exports.winUninstallCert = winUninstallCert;
/**
 * Uses Powershell to get info about a cert.
 * @param pfxPath The path to the pfx file to get info for.
 * @returns The subject, thumbprint and pfxPath of the cert.
 */
async function winGetPfxInfo(pfxPath) {
    if (!(0, generalUtils_js_1.isPlatformWindows)()) {
        throw new Error('winGetPfxInfo is only supported on Windows');
    }
    validatePfxPath(pfxPath);
    const psCommandArgs = (0, generalUtils_js_1.getPowershellHackArgs)(`Get-PfxCertificate -FilePath '${pfxPath}' | Select-Object -Property Subject, Thumbprint, @{Name='PfxPath';Expression={'${pfxPath}'}} | ConvertTo-Json`);
    const result = await (0, generalUtils_js_1.spawnAsync)('powershell', psCommandArgs, { stdio: 'pipe' });
    throwIfSpawnResultError(result);
    const json = result.stdout.trim();
    const parsedJson = JSON.parse(json);
    const certInfo = {
        subject: parsedJson.Subject,
        thumbprint: parsedJson.Thumbprint,
        pfxPath: parsedJson.PfxPath
    };
    return certInfo;
}
exports.winGetPfxInfo = winGetPfxInfo;
/**
 * Does not actually do anything - just outputs the manual instructions for installing a cert for use by chrome on linux.
 */
function linuxInstallCert() {
    const instructions = `Automated linux cert install not supported (chrome does not use system certs without significant extra configuration).
Manual Instructions:
- In Chrome, go to chrome://settings/certificates
- Select Authorities -> import
- Select your generated .crt file (in the ./cert/ directory by default - if you haven't generated it, see the generateCertWithOpenSsl function)
- Check box for "Trust certificate for identifying websites"
- Click OK
- Reload site`;
    console.log(instructions);
}
exports.linuxInstallCert = linuxInstallCert;
function throwIfMaybeBadUrlChars(url, varName = 'url') {
    if (url.includes(' ')) {
        throw Error(`${varName} should not contain spaces`);
    }
    if (url.includes('/')) {
        throw Error(`${varName} should not contain forward slashes`);
    }
    if (url.includes('\\')) {
        throw Error(`${varName} should not contain backslashes`);
    }
}
function getBrewOpensslPath() {
    const brewResult = (0, generalUtils_js_1.simpleSpawnSync)('brew', ['--prefix', 'openssl']);
    if (brewResult.error) {
        throw Error('error attempting to find openssl installed by brew');
    }
    if (brewResult.stdoutLines.length === 0 || brewResult.stdoutLines.length > 1) {
        throw new Error(`unexpected output from brew command 'brew --prefix openssl': ${brewResult.stdout}`);
    }
    return brewResult.stdoutLines[0];
}
function getSanCnfFileContents(url) {
    return sanCnfTemplate.replace(/{{url}}/g, url);
}
function validateSubject(subject) {
    if (subject.includes('\\') || subject.includes('/') || subject.endsWith('.pfx')) {
        throw new Error(`The subject appears to be a file path, which is not allowed. Did you mean to pass something like this instead: { pfxPath: '${subject}' } ?`);
    }
    validateNoQuotes('subject', subject);
}
function validateNoQuotes(name, value) {
    if (value.includes("'") || value.includes('"')) {
        throw new Error(`The value passed for '${name}' contains a single or double quote, which is not allowed.`);
    }
}
function throwIfSpawnResultError(result) {
    if (result.code !== 0) {
        // There won't be any stderr if stdio was set to 'inherit', so we're checking first
        if (result.stderr) {
            console.error((0, colors_js_1.red)('Error:'), result.stderr);
        }
        throw Error(`Spawned command failed with exit code ${result.code}`);
    }
}
function validatePfxPath(pfxPath) {
    if (!pfxPath.endsWith('.pfx')) {
        throw new Error('pfxPath must end with .pfx');
    }
    (0, generalUtils_js_1.requireValidPath)('pfxPath', pfxPath);
    validateNoQuotes('pfxPath', pfxPath);
}
function getRequiresElevatedPermissionsMessage(isInstall = true) {
    return `${generalUtils_js_1.Emoji.Info} Important: ${isInstall ? '' : 'un'}installing a certificate requires elevated permissions`;
}
// Newer cert requirements force the need for "extension info" with DNS and IP info, but openssl v1.x doesn't support that with the
// CLI option -addext, so we're using a san.cnf file instead and passing this into the CLI command with the -config option.
const sanCnfTemplate = `[req]
distinguished_name=req
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = {{url}}

[v3_req]
subjectAltName = @alt_names

[alt_names]
DNS.1 = {{url}}
IP.1 = 127.0.0.1

`;
//# sourceMappingURL=data:application/json;base64,