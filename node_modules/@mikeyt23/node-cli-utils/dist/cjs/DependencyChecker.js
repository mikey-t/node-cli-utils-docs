"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_child_process_1 = require("node:child_process");
const chalk_1 = __importDefault(require("chalk"));
const node_process_1 = require("node:process");
const net = __importStar(require("net"));
const generalUtils_js_1 = require("./generalUtils.js");
class DependencyChecker {
    constructor() {
        this.platformCode = this.getPlatform();
    }
    hasAllDependencies(dependenciesReport) {
        if (dependenciesReport === null) {
            return false;
        }
        return dependenciesReport.every(entry => entry.value);
    }
    getFormattedReport(report, includePlatform, omitKeys) {
        const platformKey = 'Platform';
        const filteredReport = omitKeys && omitKeys.length > 0 ?
            report.filter(entry => !omitKeys.includes(entry.key)) :
            report;
        const longestKeyLength = Math.max(...filteredReport.map(entry => entry.key.length), platformKey.length);
        let reportString = '\n';
        if (includePlatform) {
            reportString += `${platformKey}${' '.repeat(longestKeyLength - platformKey.length)}: ${this.platformCode}\n`;
        }
        for (const { key, value } of filteredReport) {
            const padding = ' '.repeat(longestKeyLength - key.length);
            reportString += `${key}${padding}: ${value ? chalk_1.default.green('true') : chalk_1.default.red('false')}\n`;
        }
        return reportString;
    }
    async hasElevatedPermissions() {
        if (this.platformCode === 'win') {
            return await this.winHasElevatedPerms();
        }
        else if (this.platformCode === 'linux') {
            return await this.linuxHasElevatedPerms();
        }
        else if (this.platformCode === 'mac') {
            return await this.linuxHasElevatedPerms();
        }
        return false;
    }
    async winHasElevatedPerms() {
        try {
            await (0, generalUtils_js_1.spawnAsync)('net', ['session'], { throwOnNonZero: true, stdio: 'ignore' });
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async linuxHasElevatedPerms() {
        if (!process.getuid) {
            throw new Error('Cannot determine if linux user has elevated permissions (process.getuid is undefined)');
        }
        const uid = process.getuid();
        return uid === 0;
    }
    async hasGit() {
        return !!(0, generalUtils_js_1.whichSync)('git').location;
    }
    async hasDotnetSdkGreaterThanOrEqualTo(minimumMajorVersion) {
        if (!(0, generalUtils_js_1.whichSync)('dotnet').location) {
            return false;
        }
        const childProc = (0, node_child_process_1.spawnSync)('dotnet', ['--list-sdks'], { encoding: 'utf-8' });
        if (childProc.error) {
            return false;
        }
        const lines = childProc.stdout.split('\n').filter((line) => !!line);
        const lastLine = lines[lines.length - 1];
        let latestMajorVersion;
        try {
            latestMajorVersion = parseInt(lastLine.substring(0, lastLine.indexOf('.')));
        }
        catch (_a) {
            throw Error('error parsing results of dotnet --list-sdks');
        }
        return latestMajorVersion >= minimumMajorVersion;
    }
    async hasNodejsGreaterThanOrEqualTo(minimumMajorVersion) {
        if (!(0, generalUtils_js_1.whichSync)('node').location) {
            return false;
        }
        const childProc = (0, node_child_process_1.spawnSync)('node', ['-v'], { encoding: 'utf-8' });
        if (childProc.error) {
            return false;
        }
        const output = childProc.stdout;
        if (!output || output.length === 0) {
            return false;
        }
        if (!output.startsWith('v')) {
            throw Error('unexpected output for node -v');
        }
        let foundMajorVersion;
        try {
            foundMajorVersion = parseInt(output.substring(1, output.indexOf('.')));
        }
        catch (_a) {
            throw Error('error parsing node version');
        }
        return foundMajorVersion >= minimumMajorVersion;
    }
    async hasDocker() {
        return !!(0, generalUtils_js_1.whichSync)('docker');
    }
    async dockerIsRunning() {
        return await (0, generalUtils_js_1.isDockerRunning)();
    }
    async hasOpenssl() {
        if (this.platformCode === 'mac') {
            const childProc = (0, node_child_process_1.spawnSync)('brew', ['--prefix', 'openssl'], { encoding: 'utf-8' });
            if (childProc.error) {
                return false;
            }
            const output = childProc.stdout;
            if (!output || output.length === 0) {
                return false;
            }
            return !output.toLowerCase().startsWith('error');
        }
        return !!(0, generalUtils_js_1.whichSync)('openssl').location;
    }
    async isPortAvailableByEnvKey(envKey) {
        const errorBase = `Cannot lookup port availability for env key ${envKey}`;
        const envVal = process.env[envKey];
        if (!envVal) {
            throw new Error(errorBase + ' - env value not found');
        }
        const port = parseInt(envVal);
        if (isNaN(port)) {
            throw new Error(errorBase + ' - env value could not be parsed into an integer');
        }
        return await this.isPortAvailable(port);
    }
    async isPortAvailable(port) {
        return new Promise((resolve) => {
            const tester = net.connect(port, '127.0.0.1');
            tester.on('connect', () => {
                tester.destroy();
                resolve(false); // port is in use
            });
            tester.on('error', (err) => {
                tester.destroy();
                if (err.code === 'ECONNREFUSED') {
                    resolve(true); // port is available
                }
                else {
                    resolve(false); // some other error occurred, assume port is in use
                }
            });
        });
    }
    getPlatform() {
        if ((0, generalUtils_js_1.isPlatformWindows)()) {
            return 'win';
        }
        else if ((0, generalUtils_js_1.isPlatformMac)()) {
            return 'mac';
        }
        else if ((0, generalUtils_js_1.isPlatformLinux)()) {
            return 'linux';
        }
        else {
            throw Error(`Platform not supported: ${node_process_1.platform}. Nodejs process.platform must be win32, darwin or linux.`);
        }
    }
}
exports.default = DependencyChecker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVwZW5kZW5jeUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRGVwZW5kZW5jeUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJEQUE4QztBQUM5QyxrREFBeUI7QUFDekIsK0NBQTREO0FBQzVELHlDQUEwQjtBQUMxQix1REFBNkg7QUFNN0gsTUFBOEIsaUJBQWlCO0lBRzdDO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDeEMsQ0FBQztJQUlELGtCQUFrQixDQUFDLGtCQUFtQztRQUNwRCxJQUFJLGtCQUFrQixLQUFLLElBQUksRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkQsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQXVCLEVBQUUsZUFBeUIsRUFBRSxRQUFtQjtRQUN4RixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUE7UUFFOUIsTUFBTSxjQUFjLEdBQW9CLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxNQUFNLENBQUE7UUFFUixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQy9CLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQ2hELFdBQVcsQ0FBQyxNQUFNLENBQ25CLENBQUE7UUFFRCxJQUFJ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