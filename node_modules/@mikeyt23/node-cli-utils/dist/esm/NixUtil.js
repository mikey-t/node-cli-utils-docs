import { isPlatformWindows, log, simpleSpawnSync, spawnAsync } from './generalUtils.js';
// Untested - moved over from old project
export class NixUtil {
    sudoerUsername = '';
    populateSudoerErrorMessage = '';
    constructor() {
        if (isPlatformWindows()) {
            throw new Error('NixUtil is not supported on Windows');
        }
        this.tryPopulateSudoerUsername();
    }
    async tryPopulateSudoerUsername() {
        const sudoerId = process.env.SUDO_UID;
        if (sudoerId === undefined) {
            this.populateSudoerErrorMessage = 'cannot get sudoer username - process not started with sudo';
            return;
        }
        log(`attempting to find username for sudoer id ${sudoerId}`);
        const childProcess = simpleSpawnSync('id', ['-nu', sudoerId]);
        if (childProcess.code !== 0) {
            throw new Error(`Unable to get sudoer username - id command exited with code ${childProcess.code}. Stderr: ${childProcess.stderr}`);
        }
        let username = childProcess.stdout;
        if (!username) {
            this.populateSudoerErrorMessage = 'unable to get sudoer username - id command did not return a username';
            return;
        }
        username = username.replace('\n', '');
        log(`using sudoer username: ${username}`);
        this.sudoerUsername = username;
    }
    async runAsSudoer(cmd, cwd) {
        if (!this.sudoerUsername) {
            if (this.populateSudoerErrorMessage) {
                throw new Error(this.populateSudoerErrorMessage);
            }
            else {
                throw new Error('sudoer username was not populated - cannot continue');
            }
        }
        const cmdArgs = `-H -u ${this.sudoerUsername} bash -c`.split(' ');
        cmdArgs.push(`'${cmd}'`);
        await spawnAsync('sudo', cmdArgs, { cwd: cwd ?? process.cwd() });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTml4VXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9OaXhVdGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRXZGLHlDQUF5QztBQUN6QyxNQUFNLE9BQU8sT0FBTztJQUNWLGNBQWMsR0FBVyxFQUFFLENBQUE7SUFDM0IsMEJBQTBCLEdBQVcsRUFBRSxDQUFBO0lBRS9DO1FBQ0UsSUFBSSxpQkFBaUIsRUFBRSxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQTtTQUN2RDtRQUVELElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFBO0lBQ2xDLENBQUM7SUFFTyxLQUFLLENBQUMseUJBQXlCO1FBQ3JDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBO1FBRXJDLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMxQixJQUFJLENBQUMsMEJBQTBCLEdBQUcsNERBQTRELENBQUE7WUFDOUYsT0FBTTtTQUNQO1FBRUQsR0FBRyxDQUFDLDZDQUE2QyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRTVELE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUU3RCxJQUFJLFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELFlBQVksQ0FBQyxJQUFJLGFBQWEsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7U0FDcEk7UUFFRCxJQUFJLFFBQVEsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFBO1FBRWxDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixJQUFJLENBQUMsMEJBQTBCLEdBQUcsc0VBQXNFLENBQUE7WUFDeEcsT0FBTTtTQUNQO1FBRUQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRXJDLEdBQUcsQ0FBQywwQkFBMEIsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUV6QyxJQUFJLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQTtJQUNoQyxDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFXLEVBQUUsR0FBWTtRQUNqRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN4QixJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQTthQUNqRDtpQkFBTTtnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUE7YUFDdkU7U0FDRjtRQUVELE1BQU0sT0FBTyxHQUFHLFNBQVMsSUFBSSxDQUFDLGNBQWMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQTtRQUN4QixNQUFNLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7Q0FDRiJ9