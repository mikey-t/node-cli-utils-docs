/**
 * Wrapper function for `dotnet ef`. If you don't pass `false` for `noBuild`, be sure the project has already been built by some other means.
 *
 * Docs for "dotnet ef" CLI: https://learn.microsoft.com/en-us/ef/core/cli/dotnet.
 * @param projectPath Path to project that has the DbContext and Migration files used for the `--project` argument
 * @param dbContextName The name of the DbContext class used for the `--context` argument
 * @param args Arguments to pass to the `dotnet ef` CLI
 * @param noBuild If true, the `--no-build` argument will be passed to the `dotnet ef` CLI (default: true)
 */
export declare function dotnetEfCommand(projectPath: string, dbContextName: string, args: string[], noBuild?: boolean): Promise<number>;
/**
 * Wrapper function for `dotnet ef migrations list`.
 * @param projectPath The path to the project that contains the DbContext and Migration files
 * @param dbContextName The name of the DbContext class
 */
export declare function efMigrationsList(projectPath: string, dbContextName: string): Promise<void>;
/**
 * Wrapper function for `dotnet ef database update <migration_name>`.
 * @param projectPath The path to the project that contains the DbContext and Migration files
 * @param dbContextName The name of the DbContext class
 * @param migrationName The name of the migration to update to (optional). If not provided, all migrations will be applied.
 */
export declare function efMigrationsUpdate(projectPath: string, dbContextName: string, migrationName?: string): Promise<void>;
/**
 *
 * @param projectPath The path to the project that contains the DbContext and Migration files
 * @param dbContextName The name of the DbContext class
 * @param migrationName The name of the migration to add
 * @param withBoilerplate If true, boilerplate will be added to the migration C# file and empty Up and Down SQL files will be created
 */
export declare function efAddMigration(projectPath: string, dbContextName: string, migrationName: string, withBoilerplate?: boolean): Promise<void>;
/**
 *
 * @param projectPath The path to the project that contains the DbContext and Migration files
 * @param dbContextName The name of the DbContext class
 * @param skipConfirm If `true`, the user will not be prompted to confirm the removal of the last migration
 */
export declare function efRemoveLastMigration(projectPath: string, dbContextName: string, skipConfirm?: boolean): Promise<void>;
//# sourceMappingURL=dbMigrationUtils.d.ts.map