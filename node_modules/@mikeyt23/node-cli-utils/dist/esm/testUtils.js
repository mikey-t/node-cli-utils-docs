import assert from 'node:assert';
import fs from 'node:fs';
import fsp from 'node:fs/promises';
export const tempDir = './test/temp';
export const fixturesDir = './test/fixtures';
export const only = { only: true }; // Convenience object to make it easier to mark tests as "only"
export const ensureEmptyTempDir = async (dir) => {
    if (!dir) {
        throw new Error('dir is required');
    }
    if (!dir.startsWith('test/temp') && !dir.startsWith('test\\temp') && !dir.startsWith('./test/temp') && !dir.startsWith('.\\test\\temp')) {
        throw new Error(`dir must start with 'test/temp': ${dir}`);
    }
    if (fs.existsSync(dir)) {
        await fsp.rm(dir, { recursive: true, force: true });
    }
    await fsp.mkdir(dir, { recursive: true });
};
export function fileExistsAndIsNonZero(filePath) {
    try {
        const stats = fs.statSync(filePath);
        return stats.isFile() && stats.size > 0;
    }
    catch (err) {
        const e = err;
        if (e.code === 'ENOENT') {
            return false; // File doesn't exist
        }
        throw err; // Rethrow other errors
    }
}
export function assertErrorMessageStartsWith(err, expectedStartsWith) {
    assert(err instanceof Error);
    assert.strictEqual(err.message.startsWith(expectedStartsWith), true, `Error message did not start with expected value. Actual: "${err.message}".`);
    return true;
}
export function assertErrorMessageIncludes(err, expectedIncludes) {
    assert(err instanceof Error);
    assert.strictEqual(err.message.includes(expectedIncludes), true, `Error message did not include the expected value. Actual: "${err.message}".`);
    return true;
}
export function assertErrorMessageEquals(err, expected) {
    assert(err instanceof Error);
    assert.strictEqual(err.message, expected, `Error message did not equal the expected value. Actual: "${err.message}".`);
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdFV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rlc3RVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxhQUFhLENBQUE7QUFDaEMsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3hCLE9BQU8sR0FBRyxNQUFNLGtCQUFrQixDQUFBO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUE7QUFDcEMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFBO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQSxDQUFDLCtEQUErRDtBQUVsRyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDdEQsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtLQUNuQztJQUNELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQ3ZJLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLEdBQUcsRUFBRSxDQUFDLENBQUE7S0FDM0Q7SUFDRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEIsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7S0FDcEQ7SUFDRCxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLFFBQWdCO0lBQ3JELElBQUk7UUFDRixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ25DLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0tBQ3hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLENBQUMsR0FBRyxHQUF3QixDQUFBO1FBQ2xDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUEsQ0FBQyxxQkFBcUI7U0FDbkM7UUFDRCxNQUFNLEdBQUcsQ0FBQSxDQUFDLHVCQUF1QjtLQUNsQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsNEJBQTRCLENBQUMsR0FBWSxFQUFFLGtCQUEwQjtJQUNuRixNQUFNLENBQUMsR0FBRyxZQUFZLEtBQUssQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLEVBQUUsNkRBQTZELEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFBO0lBQ2xKLE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxHQUFZLEVBQUUsZ0JBQXdCO0lBQy9FLE1BQU0sQ0FBQyxHQUFHLFlBQVksS0FBSyxDQUFDLENBQUE7SUFDNUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksRUFBRSw4REFBOEQsR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUE7SUFDL0ksT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLHdCQUF3QixDQUFDLEdBQVksRUFBRSxRQUFnQjtJQUNyRSxNQUFNLENBQUMsR0FBRyxZQUFZLEtBQUssQ0FBQyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsNERBQTRELEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFBO0lBQ3RILE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyJ9