import fsp from 'node:fs/promises';
import os from 'node:os';
import { getHostname, hasWhitespace, isPlatformWindows, log, requireString, stringToNonEmptyLines } from './generalUtils.js';
export async function ensureHostsEntry(url, ipV4Address = '127.0.0.1') {
    const hostname = getHostname(url);
    await changeHostsFile(hostname, ipV4Address, 'add');
}
export async function removeHostsEntry(url, ipV4Address = '127.0.0.1') {
    const hostname = getHostname(url);
    await changeHostsFile(hostname, ipV4Address, 'remove');
}
export function getHostsPath() {
    return isPlatformWindows() ? 'C:/Windows/System32/drivers/etc/hosts' : '/etc/hosts';
}
export async function getHostsFileString() {
    return await fsp.readFile(getHostsPath(), { encoding: 'utf-8' });
}
export async function hostsFileHasEntry(hostname, ipV4Address = '127.0.0.1') {
    const entry = `${ipV4Address} ${hostname}`;
    const hostsFileString = await getHostsFileString();
    return hostsFileStringHasEntry(hostsFileString, entry);
}
// Check by normalizing whitespace (collapse consecutive spaces to single spaces) in entry and on each line checked
export function hostsFileStringHasEntry(hostsFileString, entry) {
    const normalizedEntry = entry.replace(/\s+/g, ' ');
    const hostsLines = stringToNonEmptyLines(hostsFileString).map(l => l.replace(/\s+/g, ' ')).filter(l => !l.startsWith('#'));
    const hasLine = hostsLines.includes(normalizedEntry);
    return hasLine;
}
export async function changeHostsFile(hostname, ipV4Address, operation) {
    requireString('hostname', hostname);
    if (hasWhitespace(hostname)) {
        throw new Error(`Invalid hostname: ${hostname}`);
    }
    if (!isIpV4Address(ipV4Address)) {
        throw new Error(`Invalid ipV4Address: ${ipV4Address}`);
    }
    const isAddition = operation === 'add';
    const isRemoval = operation === 'remove';
    const hostsPath = getHostsPath();
    const entry = `${ipV4Address} ${hostname}`;
    log(`checking hosts file: ${hostsPath} for entry ${entry}`);
    const hostsFileString = await getHostsFileString();
    const hasLine = hostsFileStringHasEntry(hostsFileString, entry);
    if (isAddition && hasLine) {
        log(`there is an existing entry in the hosts file (${entry}), skipping`);
        return;
    }
    if (isRemoval && !hasLine) {
        log(`there is no hosts entry to remove (${entry}), skipping`);
    }
    if (isAddition && !hasLine) {
        log('existing entry not found - appending entry to the hosts file');
        await fsp.appendFile(hostsPath, `\n${entry}`);
    }
    if (isRemoval && hasLine) {
        log(`existing entry found - removing entry`);
        const hostsWithoutEntry = getEolNormalizedWithoutLine(hostsFileString, entry);
        await fsp.writeFile(hostsPath, hostsWithoutEntry);
    }
}
export function isIpV4Address(address) {
    const ipV4AddressRegex = /^(\d{1,3}\.){3}\d{1,3}$/;
    if (!ipV4AddressRegex.test(address)) {
        return false;
    }
    const octets = address.split('.').map(Number);
    return octets.every(octet => octet >= 0 && octet <= 255);
}
/**
 * The `initialString` will have line endings normalized to use os.EOL and lines with `omitLine` will be removed.
 * Comparisons for which lines should be removed are normalizing whitespace (multiple spaces collapsed into single
 * spaces for the comparison). This is useful to remove instances of a hosts entry, for example.
 * @param initialString The string to normalize remove instances of omitLine from
 * @param omitLine All instance of this string will be omitted from the result
 * @returns A string that has instances of the omitLine removed and all line endings changed to match the os.EOL
 */
export function getEolNormalizedWithoutLine(initialString, omitLine) {
    const normalizedOmitLine = omitLine.replace(/\s+/g, ' ');
    const lines = initialString.split('\n')
        .map(l => l.replace(/\r/g, ''))
        .filter(l => l.replace(/\s+/g, ' ') !== normalizedOmitLine);
    return lines.join(os.EOL);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdEZpbGVVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ob3N0RmlsZVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGtCQUFrQixDQUFBO0FBQ2xDLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUN4QixPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFFNUgsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsY0FBc0IsV0FBVztJQUNuRixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDakMsTUFBTSxlQUFlLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNyRCxDQUFDO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxHQUFXLEVBQUUsY0FBc0IsV0FBVztJQUNuRixNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDakMsTUFBTSxlQUFlLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUN4RCxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVk7SUFDMUIsT0FBTyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFBO0FBQ3JGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQjtJQUN0QyxPQUFPLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0FBQ2xFLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLFFBQWdCLEVBQUUs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