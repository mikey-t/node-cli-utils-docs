export type PlatformCode = 'win' | 'linux' | 'mac';
export type StringBoolEntry = {
    key: string;
    value: boolean;
};
export type StringBoolArray = StringBoolEntry[];
export default abstract class DependencyChecker {
    protected platformCode: PlatformCode;
    constructor();
    abstract getReport(): Promise<StringBoolArray>;
    hasAllDependencies(dependenciesReport: StringBoolArray): boolean;
    getFormattedReport(report: StringBoolArray, includePlatform?: boolean, omitKeys?: string[]): string;
    protected hasElevatedPermissions(): Promise<boolean>;
    protected winHasElevatedPerms(): Promise<boolean>;
    protected linuxHasElevatedPerms(): Promise<boolean>;
    protected hasGit(): Promise<boolean>;
    protected hasDotnetSdkGreaterThanOrEqualTo(minimumMajorVersion: number): Promise<boolean>;
    protected hasNodejsGreaterThanOrEqualTo(minimumMajorVersion: number): Promise<boolean>;
    protected hasDocker(): Promise<boolean>;
    protected dockerIsRunning(): Promise<boolean>;
    protected hasOpenssl(): Promise<boolean>;
    protected isPortAvailableByEnvKey(envKey: string): Promise<boolean>;
    protected isPortAvailable(port: number): Promise<boolean>;
    private getPlatform;
}
//# sourceMappingURL=DependencyChecker.d.ts.map