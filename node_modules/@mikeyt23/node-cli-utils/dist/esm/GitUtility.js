import fs from 'node:fs';
import fsp from 'node:fs/promises';
import { mkdirp, spawnAsync } from './generalUtils.js';
import { join } from 'node:path';
class GitUtility {
    spawnAsyncFn;
    constructor(dependencies = {}) {
        this.spawnAsyncFn = dependencies.spawnAsyncFn ?? spawnAsync;
    }
    isValidBranchName(branchName) {
        if (branchName.startsWith('-') || branchName.endsWith('/') || branchName.endsWith('.') || branchName.endsWith('@{') || branchName.includes('..')) {
            return false;
        }
        const invalidChars = [' ', '~', '^', ':', '\\', '*', '?', '[', ']', '/'];
        for (const char of branchName) {
            if (invalidChars.includes(char)) {
                return false;
            }
        }
        return true;
    }
    async cloneProject(repoUrl, localDestPath, branchName = 'main', deleteGitFolder = true) {
        if (fs.existsSync(localDestPath)) {
            throw new Error(`Cannot clone project - destination path already exists: ${localDestPath}`);
        }
        if (!this.isValidBranchName(branchName)) {
            throw new Error(`Cannot clone project - invalid branch name: ${branchName}`);
        }
        await mkdirp(localDestPath);
        const cloneArgs = `clone -b ${branchName} --single-branch --depth 1 ${repoUrl} ${localDestPath}`.split(' ');
        const result = await this.spawnAsyncFn('git', cloneArgs);
        if (result.code !== 0) {
            throw new Error(`Failed to clone project '${result.stderr}' to '${localDestPath}'`);
        }
        if (deleteGitFolder) {
            await fsp.rm(join(localDestPath, '.git'), { recursive: true });
        }
    }
}
const defaultGitUtility = new GitUtility();
export const isValidBranchName = defaultGitUtility.isValidBranchName;
export const cloneProject = defaultGitUtility.cloneProject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2l0VXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9HaXRVdGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUN4QixPQUFPLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQTtBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ3RELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFNaEMsTUFBTSxVQUFVO0lBQ04sWUFBWSxDQUFtQjtJQUV2QyxZQUFZLGVBQWdELEVBQUU7UUFDNUQsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsWUFBWSxJQUFJLFVBQVUsQ0FBQTtJQUM3RCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsVUFBa0I7UUFDbEMsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDaEosT0FBTyxLQUFLLENBQUE7U0FDYjtRQUVELE1BQU0sWUFBWSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDeEUsS0FBSyxNQUFNLElBQUksSUFBSSxVQUFVLEVBQUU7WUFDN0IsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMvQixPQUFPLEtBQUssQ0FBQTthQUNiO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQWUsRUFBRSxhQUFxQixFQUFFLGFBQXFCLE1BQU0sRUFBRSxrQkFBMkIsSUFBSTtRQUNySCxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsYUFBYSxFQUFFLENBQUMsQ0FBQTtTQUM1RjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsVUFBVSxFQUFFLENBQUMsQ0FBQTtTQUM3RTtRQUVELE1BQU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBRTNCLE1BQU0sU0FBUyxHQUFHLFlBQVksVUFBVSw4QkFBOEIsT0FBTyxJQUFJLGFBQWEsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzRyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFBO1FBQ3hELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsTUFBTSxDQUFDLE1BQU0sU0FBUyxhQUFhLEdBQUcsQ0FBQyxDQUFBO1NBQ3BGO1FBRUQsSUFBSSxlQUFlLEVBQUU7WUFDbkIsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtTQUMvRDtJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQTtBQUUxQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQTtBQUNwRSxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUMsWUFBWSxDQUFBIn0=