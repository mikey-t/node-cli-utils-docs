import { spawnSync } from 'node:child_process';
import chalk from 'chalk';
import { platform as rawPlatformString } from 'node:process';
import * as net from 'net';
import { isDockerRunning, isPlatformLinux, isPlatformMac, isPlatformWindows, spawnAsync, whichSync } from './generalUtils.js';
export default class DependencyChecker {
    platformCode;
    constructor() {
        this.platformCode = this.getPlatform();
    }
    hasAllDependencies(dependenciesReport) {
        if (dependenciesReport === null) {
            return false;
        }
        return dependenciesReport.every(entry => entry.value);
    }
    getFormattedReport(report, includePlatform, omitKeys) {
        const platformKey = 'Platform';
        const filteredReport = omitKeys && omitKeys.length > 0 ?
            report.filter(entry => !omitKeys.includes(entry.key)) :
            report;
        const longestKeyLength = Math.max(...filteredReport.map(entry => entry.key.length), platformKey.length);
        let reportString = '\n';
        if (includePlatform) {
            reportString += `${platformKey}${' '.repeat(longestKeyLength - platformKey.length)}: ${this.platformCode}\n`;
        }
        for (const { key, value } of filteredReport) {
            const padding = ' '.repeat(longestKeyLength - key.length);
            reportString += `${key}${padding}: ${value ? chalk.green('true') : chalk.red('false')}\n`;
        }
        return reportString;
    }
    async hasElevatedPermissions() {
        if (this.platformCode === 'win') {
            return await this.winHasElevatedPerms();
        }
        else if (this.platformCode === 'linux') {
            return await this.linuxHasElevatedPerms();
        }
        else if (this.platformCode === 'mac') {
            return await this.linuxHasElevatedPerms();
        }
        return false;
    }
    async winHasElevatedPerms() {
        try {
            await spawnAsync('net', ['session'], { throwOnNonZero: true, stdio: 'ignore' });
            return true;
        }
        catch {
            return false;
        }
    }
    async linuxHasElevatedPerms() {
        if (!process.getuid) {
            throw new Error('Cannot determine if linux user has elevated permissions (process.getuid is undefined)');
        }
        const uid = process.getuid();
        return uid === 0;
    }
    async hasGit() {
        return !!whichSync('git').location;
    }
    async hasDotnetSdkGreaterThanOrEqualTo(minimumMajorVersion) {
        if (!whichSync('dotnet').location) {
            return false;
        }
        const childProc = spawnSync('dotnet', ['--list-sdks'], { encoding: 'utf-8' });
        if (childProc.error) {
            return false;
        }
        const lines = childProc.stdout.split('\n').filter((line) => !!line);
        const lastLine = lines[lines.length - 1];
        let latestMajorVersion;
        try {
            latestMajorVersion = parseInt(lastLine.substring(0, lastLine.indexOf('.')));
        }
        catch {
            throw Error('error parsing results of dotnet --list-sdks');
        }
        return latestMajorVersion >= minimumMajorVersion;
    }
    async hasNodejsGreaterThanOrEqualTo(minimumMajorVersion) {
        if (!whichSync('node').location) {
            return false;
        }
        const childProc = spawnSync('node', ['-v'], { encoding: 'utf-8' });
        if (childProc.error) {
            return false;
        }
        const output = childProc.stdout;
        if (!output || output.length === 0) {
            return false;
        }
        if (!output.startsWith('v')) {
            throw Error('unexpected output for node -v');
        }
        let foundMajorVersion;
        try {
            foundMajorVersion = parseInt(output.substring(1, output.indexOf('.')));
        }
        catch {
            throw Error('error parsing node version');
        }
        return foundMajorVersion >= minimumMajorVersion;
    }
    async hasDocker() {
        return !!whichSync('docker');
    }
    async dockerIsRunning() {
        return await isDockerRunning();
    }
    async hasOpenssl() {
        if (this.platformCode === 'mac') {
            const childProc = spawnSync('brew', ['--prefix', 'openssl'], { encoding: 'utf-8' });
            if (childProc.error) {
                return false;
            }
            const output = childProc.stdout;
            if (!output || output.length === 0) {
                return false;
            }
            return !output.toLowerCase().startsWith('error');
        }
        return !!whichSync('openssl').location;
    }
    async isPortAvailableByEnvKey(envKey) {
        const errorBase = `Cannot lookup port availability for env key ${envKey}`;
        const envVal = process.env[envKey];
        if (!envVal) {
            throw new Error(errorBase + ' - env value not found');
        }
        const port = parseInt(envVal);
        if (isNaN(port)) {
            throw new Error(errorBase + ' - env value could not be parsed into an integer');
        }
        return await this.isPortAvailable(port);
    }
    async isPortAvailable(port) {
        return new Promise((resolve) => {
            const tester = net.connect(port, '127.0.0.1');
            tester.on('connect', () => {
                tester.destroy();
                resolve(false); // port is in use
            });
            tester.on('error', (err) => {
                tester.destroy();
                if (err.code === 'ECONNREFUSED') {
                    resolve(true); // port is available
                }
                else {
                    resolve(false); // some other error occurred, assume port is in use
                }
            });
        });
    }
    getPlatform() {
        if (isPlatformWindows()) {
            return 'win';
        }
        else if (isPlatformMac()) {
            return 'mac';
        }
        else if (isPlatformLinux()) {
            return 'linux';
        }
        else {
            throw Error(`Platform not supported: ${rawPlatformString}. Nodejs process.platform must be win32, darwin or linux.`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVwZW5kZW5jeUNoZWNrZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRGVwZW5kZW5jeUNoZWNrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzlDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQTtBQUN6QixPQUFPLEVBQUUsUUFBUSxJQUFJLGlCQUFpQixFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzVELE9BQU8sS0FBSyxHQUFHLE1BQU0sS0FBSyxDQUFBO0FBQzFCLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFNN0gsTUFBTSxDQUFDLE9BQU8sT0FBZ0IsaUJBQWlCO0lBQ25DLFlBQVksQ0FBYztJQUVwQztRQUNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3hDLENBQUM7SUFJRCxrQkFBa0IsQ0FBQyxrQkFBbUM7UUFDcEQsSUFBSSxrQkFBa0IsS0FBSyxJQUFJLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUE7U0FDYjtRQUNELE9BQU8sa0JBQWtCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxNQUF1QixFQUFFLGVBQXlCLEVBQUUsUUFBbUI7UUFDeEYsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFBO1FBRTlCLE1BQU0sY0FBYyxHQUFvQixRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN2RSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFH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