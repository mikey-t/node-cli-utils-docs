#!/usr/bin/env node
import fs from 'node:fs';
import path from 'node:path';
import Swig, { log, possibleTaskFileNames, red, trace, yellow } from './Swig.js';
import { spawn } from 'node:child_process';
export default class SwigStartupWrapper {
    swigfilePath = '';
    swigfileName = '';
    packageJsonType = 'commonjs';
    swigfileExtension = 'js';
    hasTsx = false;
    constructor() { }
    main() {
        trace('- SwigStartupWrapper is checking a few things...');
        const hasSwigfile = this.populateSwigfile();
        if (hasSwigfile) {
            trace(`- swigfile: ${this.swigfilePath}`);
            trace(`- swigfile extension: ${this.swigfileExtension}`);
        }
        this.populatePackageJsonTypeOrThrow();
        trace(`- package.json type: ${this.packageJsonType}`);
        if (hasSwigfile) {
            this.warnIfPossibleSwigfileSyntaxMismatch();
        }
        else {
            trace(`- swigfile not found - skipping syntax check`);
        }
        return this.spawnSwig();
    }
    async spawnSwig() {
        const preservedArgs = process.argv.slice(2);
        const isTypescript = this.swigfileExtension === 'ts';
        const swigScriptEsm = './node_modules/swig-cli/dist/esm/swigCli.js';
        const swigScriptCjs = './node_modules/swig-cli/dist/cjs/swigCli.cjs';
        const tsNodeBinCjs = './node_modules/ts-node/dist/bin.js';
        const tsNodeBinEsm = './node_modules/ts-node/dist/bin-esm.js';
        let swigScript = swigScriptEsm;
        let tsNodeBin = tsNodeBinEsm;
        if (isTypescript && this.packageJsonType === 'esm') {
            swigScript = swigScriptEsm;
            tsNodeBin = tsNodeBinEsm;
        }
        else if (isTypescript && this.packageJsonType === 'commonjs') {
            swigScript = swigScriptCjs;
            tsNodeBin = tsNodeBinCjs;
        }
        if (isTypescript && !this.hasTsx && !fs.existsSync(tsNodeBin)) {
            this.exitWithError(`typescript detected but a dev dependency is missing.\nChoose and install either ts-node or tsx using 'npm i -D ts-node' or 'npm i -D tsx' (note that tsx esm functionality is experimental).`);
        }
        const command = 'node';
        let spawnArgs = [swigScript, ...preservedArgs];
        if (isTypescript && this.hasTsx) {
            spawnArgs = ['--no-warnings', '--loader', 'tsx', ...spawnArgs];
        }
        else if (isTypescript) {
            spawnArgs = [tsNodeBin, '-T', swigScript, ...preservedArgs];
        }
        trace(`- swig-cli spawn command: ${command} ${spawnArgs.join(' ')}`);
        return this.spawnSwigCliAsync(command, spawnArgs);
    }
    populateSwigfile() {
        let swigfilePath;
        for (const filename of possibleTaskFileNames) {
            swigfilePath = `./${filename}`;
            if (fs.existsSync(swigfilePath)) {
                this.swigfilePath = swigfilePath;
                this.swigfileName = path.basename(this.swigfilePath);
                this.swigfileExtension = this.swigfileName.split('.')[1];
                return true;
            }
        }
        return false;
    }
    populatePackageJsonTypeOrThrow() {
        const packageJsonPath = './package.json';
        if (!fs.existsSync(packageJsonPath)) {
            this.exitWithError('no package.json found - cannot detect project type');
        }
        const packageJsonContents = fs.readFileSync(packageJsonPath, { encoding: 'utf-8' });
        const packageJson = JSON.parse(packageJsonContents);
        this.packageJsonType = packageJson.type && packageJson.type.toLowerCase() === 'module' ? 'esm' : 'commonjs';
        // Check that swig-cli is installed as a dependency or devDependency
        if ((packageJson.devDependencies && packageJson.devDependencies['swig-cli']) || (packageJson.dependencies && packageJson.dependencies['swig-cli'])) {
            trace('- swig-cli is installed as a dependency in the project');
        }
        else {
            this.exitWithError(`swig-cli was not found in the project dependencies or devDependencies - install with: npm i -D swig-cli`);
        }
        if ((packageJson.devDependencies && packageJson.devDependencies['tsx']) || (packageJson.dependencies && packageJson.dependencies['tsx'])) {
            this.hasTsx = true;
            trace('- tsx is installed as a dependency in the project');
        }
    }
    warnIfPossibleSwigfileSyntaxMismatch() {
        const swigfileContents = fs.readFileSync(this.swigfilePath, { encoding: 'utf-8' });
        if (swigfileContents.trim() === '')
            return;
        if (!swigfileContents) {
            throw new Error(`Error parsing swigfile ${this.swigfilePath}`);
        }
        const swigfileContentsWithoutComments = this.stripComments(swigfileContents);
        const hasEsmSyntax = this.fileStringHasEsm(swigfileContentsWithoutComments);
        const hasCommonJsSyntax = this.fileStringHasCommonJs(swigfileContentsWithoutComments);
        const hasBoth = hasEsmSyntax && hasCommonJsSyntax;
        // Don't warn - it might just be a new project with nothing exported or imported yet
        if (!hasEsmSyntax && !hasCommonJsSyntax)
            return;
        // Typescript allows both cjs and esm syntax, even mixed - as long as the package.json type is commonjs
        if (this.swigfileExtension === 'ts' && this.packageJsonType === 'commonjs')
            return;
        if (this.swigfileExtension === 'ts' && this.packageJsonType === 'esm' && (hasBoth || hasCommonJsSyntax)) {
            this.logWarning(`${this.swigfileName} needs to use only ESM syntax if the package.json type is set to "module".`);
            this.logOptionsMatrix();
            return;
        }
        if (hasBoth) {
            this.logWarning(`${this.swigfileName} appears to have both ESM and CommonJS syntax, but it should have only one or the other.`);
            this.logOptionsMatrix();
            return;
        }
        if (this.swigfileExtension === 'mjs' && hasEsmSyntax && !hasCommonJsSyntax)
            return;
        if (this.swigfileExtension === 'cjs' && !hasEsmSyntax && hasCommonJsSyntax)
            return;
        if (this.swigfileExtension === 'js' && this.packageJsonType === 'esm' && hasEsmSyntax)
            return;
        if (this.swigfileExtension === 'js' && this.packageJsonType === 'commonjs' && hasCommonJsSyntax)
            return;
        if (this.swigfileExtension === 'ts' && this.packageJsonType === 'commonjs')
            return;
        if (this.swigfileExtension === 'ts' && this.packageJsonType === 'esm' && hasEsmSyntax)
            return;
        this.logWarning(`${this.swigfileExtension} appears to use ${hasEsmSyntax ? 'ESM' : 'CommonJS'} syntax and your package.json type is set to ${this.packageJsonType}.`);
        this.logOptionsMatrix();
    }
    fileStringHasEsm(fileContent) {
        const esmPatterns = [
            /^\s*import\s+\w+\s+from\s+['"].+['"]/m,
            /^\s*import\s*\{[^}]+\}\s+from\s+['"].+['"]/m,
            /^\s*export\s+const\s+\w+/m,
            /^\s*export\s+default\s+\w+/m,
            /^\s*export\s+function\s+\w+/m,
            /^\s*export\s+class\s+\w+/m // export class x
        ];
        return esmPatterns.some(pattern => pattern.test(fileContent));
    }
    fileStringHasCommonJs(fileContent) {
        const commonJsPatterns = [
            /^\s*const\s+\w+\s+=\s+require\(['"].+['"]\)/m,
            /^\s*module\.exports\s+=/m,
            /^\s*exports\.\w+\s+=/m // exports.x =
        ];
        return commonJsPatterns.some(pattern => pattern.test(fileContent));
    }
    stripComments(content) {
        return content.replace(/\/\/.*$|\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '');
    }
    logWarning(str) {
        log(`\n${yellow('[swig-cli] Warning:')} ${str}`);
    }
    exitWithError(message) {
        log(`${red('[swig-cli] Error:')} ${message}`);
        process.exit(1);
    }
    logOptionsMatrix() {
        const optionsData = [
            ['swigfile', 'package.json type', 'syntax', 'notes'],
            ['.cjs', 'any', 'CommonJS', ''],
            ['.mjs', 'any', 'ESM', ''],
            ['.js', 'module', 'ESM', ''],
            ['.js', 'commonjs', 'CommonJS', ''],
            ['.ts', 'module', 'ESM', 'can be affected by tsconfig.json settings'],
            ['.ts', 'commonjs', 'CommonJS and/or ESM', 'can be affected by tsconfig.json settings']
        ];
        log('\nAvailable configurations:\n');
        this.logTable(optionsData);
        log('');
    }
    logTable(data) {
        if (data.length === 0 || data[0].length === 0)
            return;
        const numColumns = data[0].length;
        const columnWidths = [];
        for (let i = 0; i < numColumns; i++) {
            columnWidths[i] = Math.max(...data.map(row => row[i]?.length || 0));
        }
        const lineSeparator = ' ' + columnWidths.map(width => '-'.repeat(width)).join(' + ');
        for (let i = 0; i < data.length; i++) {
            const paddedRowArray = data[i].map((cell, colIdx) => cell.padEnd(columnWidths[colIdx], ' '));
            log(' ' + paddedRowArray.join(' | '));
            if (i === 0)
                log(lineSeparator);
        }
    }
    spawnSwigCliAsync(command, args) {
        return new Promise((resolve) => {
            const result = { code: 1 };
            const prefix = `[spawnSwigCliAsync] `;
            const child = spawn(command, args, { stdio: 'inherit' });
            const childId = child.pid;
            if (!childId) {
                throw new Error(`${prefix}Error spawning ChildProcess`);
            }
            const exitListener = (code) => {
                child.kill();
                child.unref();
                result.code = code;
                resolve(result);
            };
            process.on('exit', exitListener);
            const signals = ['SIGINT', 'SIGTERM', 'SIGQUIT'];
            const signalListener = (signal) => {
                trace(`${prefix}Process received ${signal} - killing ChildProcess with ID ${childId}`);
                child.kill(signal);
            };
            signals.forEach((signal) => {
                process.on(signal, signalListener);
            });
            child.on('exit', (code, signal) => {
                trace(`${prefix}ChildProcess exited with code ${code} and signal ${signal}`);
                result.code = code ?? 1;
                process.removeListener('exit', exitListener);
                signals.forEach((signal) => {
                    process.removeListener(signal, signalListener);
                });
                child.removeAllListeners();
                resolve(result);
            });
            child.on('error', (error) => {
                trace(`${prefix}ChildProcess emitted an error event: `, error);
            });
        });
    }
}
const firstArg = process.argv.slice(2)[0];
if (['h', 'help', '-h', '--help', 'v', 'version', '-v', '--version'].includes(firstArg)) {
    // If first arg is version or help, skip all checks and go straight to
    // calling Swig since all it needs to do is print some text and exit.
    trace(`- SwigStartupWrapper is skipping checks because the command is ${firstArg}`);
    new Swig().runMainAsync();
}
else {
    new SwigStartupWrapper().main()
        .then((result) => {
        if (result.error) {
            console.error(result.error);
        }
        process.exit(result.code);
    }).catch(err => {
        console.error(err);
        process.exit(42);
    });
}
//# sourceMappingURL=data:application/json;base64,