import { getSwigInstance } from './singletonManager.js';
/**
 * Call a list of async functions that are each a {@link TaskOrNamedTask} (see below) in order, waiting for each to complete before starting the next.
 *
 * If any of the functions throws an error, the remaining functions will not be executed.
 *
 * You may arbitrarily nest series and parallel calls since they are just async functions that return a {@link Task}.
 *
 * ```javascript
 * Task | NamedTask
 * ```
 *   - Any function that is async or returns a Promise
 *   - A tuple (array with 2 values) of `[string, Task]` that can be used to provide a label for an anonymous function
 *
 * Example use of {@link series} and {@link parallel} with {@link Task} and {@link NamedTask} params:
 *
 * ```javascript
 * series(
 *   task1,
 *   ['task2', async () => {}],
 *   task3,
 *   parallel(task4, ['task5', async () => {}])
 * )
 * ```
 */
export const series = (first, ...rest) => {
    const innerSeries = async () => {
        const swigInstance = getSwigInstance();
        const instanceSeries = swigInstance.series(first, ...rest);
        return instanceSeries();
    };
    return innerSeries;
};
/**
 * Call a list of async functions that are each a {@link TaskOrNamedTask} (see below) in parallel.
 *
 * Errors will not stop the execution of other functions in the current (inner) parallel method group,
 * but execution of further outer series/parallel calls will stop after the current inner parallel functions complete.
 *
 * You may arbitrarily nest series and parallel calls since they are just async functions that return a {@link Task}.
 *
 * ```javascript
 * Task | NamedTask
 * ```
 *   - Any function that is async or returns a Promise
 *   - A tuple (array with 2 values) of `[string, Task]` that can be used to provide a label for an anonymous function
 *
 * Example use of {@link series} and {@link parallel} with {@link Task} and {@link NamedTask} params:
 *
 * ```javascript
 * series(
 *   task1,
 *   ['task2', async () => {}],
 *   task3,
 *   parallel(task4, ['task5', async () => {}])
 * )
 * ```
 */
export const parallel = (first, ...rest) => {
    const innerParallel = async () => {
        const swigInstance = getSwigInstance();
        const instanceParallel = swigInstance.parallel(first, ...rest);
        return instanceParallel();
    };
    return innerParallel;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBSXZEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXVCRztBQUNILE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQXNCLEVBQUUsR0FBRyxJQUF1QixFQUFRLEVBQUU7SUFDakYsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDN0IsTUFBTSxZQUFZLEdBQUcsZUFBZSxFQUFFLENBQUE7UUFDdEMsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUMxRCxPQUFPLGNBQWMsRUFBRSxDQUFBO0lBQ3pCLENBQUMsQ0FBQTtJQUNELE9BQU8sV0FBVyxDQUFBO0FBQ3BCLENBQUMsQ0FBQTtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFzQixFQUFFLEdBQUcsSUFBdUIsRUFBUSxFQUFFO0lBQ25GLE1BQU0sYUFBYSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQy9CLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFBO1FBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQTtRQUM5RCxPQUFPLGdCQUFnQixFQUFFLENBQUE7SUFDM0IsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxhQUFhLENBQUE7QUFDdEIsQ0FBQyxDQUFBIn0=