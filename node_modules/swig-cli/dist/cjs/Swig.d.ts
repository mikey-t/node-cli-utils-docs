export declare const traceEnabled = false;
/**
 * Any function that is async or returns a Promise.
 * See {@link TaskOrNamedTask} for more info.
 */
export type Task = () => Promise<unknown>;
/**
 * A tuple (array with 2 values) of `[string, Task]` that can be used to provide a label for an anonymous function.
 * See {@link TaskOrNamedTask} for more info.
 */
export type NamedTask = [string, Task];
/**
 * ```javascript
 * Task | NamedTask
 * ```
 *   - Any function that is async or returns a Promise
 *   - A tuple (array with 2 values) of `[string, Task]` that can be used to provide a label for an anonymous function
 *
 * Example use of {@link Swig#series} and {@link Swig#parallel} with {@link Task} and {@link NamedTask} params:
 *
 * ```javascript
 * series(
 *   task1,
 *   ['task2', async () => {}],
 *   task3,
 *   parallel(task4, ['task5', async () => {}])
 * )
 * ```
 */
export type TaskOrNamedTask = Task | NamedTask;
export declare const possibleTaskFileNames: string[];
export default class Swig {
    isCommonJS: any;
    isEsm: boolean;
    private versionString;
    private cwd;
    private seriesCounter;
    private parallelCounter;
    private listCommand;
    private helpCommand;
    private versionCommand;
    private filterCommand;
    private commandDescriptors;
    constructor();
    runMainAsync(): Promise<void>;
    series(first: TaskOrNamedTask, ...rest: TaskOrNamedTask[]): Task;
    parallel(...tasks: TaskOrNamedTask[]): Task;
    private runTask;
    private getLogNameAndTask;
    private getTimestampPrefix;
    private logFormattedStartMessage;
    private logFormattedEndMessage;
    private formatElapsedDuration;
    private getTaskFilePath;
    private getStartMessage;
    private getFinishedMessage;
    private getCliParam;
    private isFunction;
    private showTaskList;
    private showHelpMessage;
    private showVersionMessage;
    private getFuncByTaskName;
    private main;
    private failureExit;
    private okExit;
}
export declare function log(message?: unknown, ...optionalParams: unknown[]): void;
export declare function trace(message?: unknown, ...optionalParams: unknown[]): void;
export declare enum AnsiColor {
    RESET = "\u001B[0m",
    RED = "\u001B[31m",
    GREEN = "\u001B[32m",
    YELLOW = "\u001B[33m",
    CYAN = "\u001B[96m",
    GRAY = "\u001B[90m",
    PURPLE = "\u001B[35m"
}
export declare const red: (str: string) => string;
export declare const green: (str: string) => string;
export declare const cyan: (str: string) => string;
export declare const gray: (str: string) => string;
export declare const purple: (str: string) => string;
export declare const yellow: (str: string) => string;
export declare const color: (str: string, color: AnsiColor) => string;
//# sourceMappingURL=Swig.d.ts.map